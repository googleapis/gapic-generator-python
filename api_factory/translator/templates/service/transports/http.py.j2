{% extends '_base.py.j2' %}

{% block content %}
from typing import Sequence, Tuple

from google.auth import credentials
from google.auth.transport.requests import AuthorizedSession

{% for rpc in service.rpcs %}
from {{ rpc.input_type.import_path }} import {{ rpc.input_type.label }}
from {{ rpc.return_type.import_path }} import {{ rpc.return_type.label }}
{% endfor %}

from .base import {{ service.label }}Transport


class {{ service.label }}HttpTransport({{ service.label }}Transport):
    """HTTP backend transport for {{ service.label }}.

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends protocol buffers over the wire, but uses HTTP/1.1.
    """
    def __init__(self, *,
        credentials: credentials.Credentials = None,
        ) -> None:
        """Instantiate the transport.

        Args:
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
        """
        super().__init__(credentials=credentials)
        self._session = AuthorizedSession(self._credentials)

    {% for rpc in service.rpcs %}
    def {{ rpc.label|snake_case }}(self,
            {{ rpc.input_type|snake_case }}: {{ rpc.input_type }}, *,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> {{ rpc.return_type}}:
        """Call the
        {{- (rpc.label|snake_case).replace('_', ' ')|wrap(width=70, initial_width=25, subsequent_indent="        ") -}}
        method over HTTP.

        Args:
            {{ rpc.input_type|snake_case }}: {{ rpc.input_type }}

        Returns:
            {{ rpc.return_type }}
        """
        # Serialize the input.
        data = {{ rpc.input_type|snake_case }}.SerializeToString()

        # Send the request.
        response = self._session.post(
            f'https://{self.SERVICE_ADDRESS}/$rpc{{ rpc.endpoint }}',
            data=data,
            headers={
                'content-type': 'application/x-protobuf',
            },
        )

        # Return the response.
        return {{ rpc.return_type }}.FromString(response.content)

    {% endfor %}
{% endblock %}
