{#
 # Copyright (C) 2019  Google LLC
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #}

{#
A careful reader may comment that there is duplication of effort
between the python verification step and the dispatch/rendering here.
There is a little, but not enough for it to be important because
1) Other python artifacts (client libraries, unit tests, and so forth)
   are generated using templates, so doing the same for generated samples is consistent.
2) Using jinja for anything requiring real logic or data structures is a bad idea.
#}

{# response handling macros #}

{% macro sample_header(file_header, sample, calling_form) %}
{% for line in file_header["copyright"].split("\n") %}
# {{ line }}
{% endfor %}
{% for line in file_header["license"].split("\n") %}
# {{ line }}
{% endfor %}
#
# DO NOT EDIT! This is a generated sample ("{{ calling_form }}",  "{{ sample.id }}")
#
# To install the latest published package dependency, execute the following:
#   pip3 install {{ sample.package_name }}
{% endmacro %}

{% macro print_string_formatting(string_list) %}
{% if string_list|length == 1 %}
"{{ string_list[0]|replace("%s", "{}") }}"
{% else %}
"{{ string_list[0]|replace("%s", "{}") }}".format({{ string_list[1:]|map("coerce_response_name")|join(", ") }})
{% endif %}
{% endmacro %}

{% macro print_input_params(requests) %}
{% with input_parameters = [] %}
{% for request in requests %}
  {% for element in request.body %}
    {% if "input_parameter" in element %}
      {% do input_parameters.append(element["input_parameter"]) %}
    {% endif %}
  {% endfor %}
{% endfor %}
{{ input_parameters|join(", ") -}}
{% endwith %}
{% endmacro %}

{% macro render_print(elts) %}
  {# First elment is a format string, remaining elements are the format string parameters #}
  {# Validating that the number of format params equals #}
  {# the number of remaining params is handled by real python code #}
print({{ print_string_formatting(elts)|trim }})
{% endmacro %}

{% macro render_comment(elts) %}
  {# First elment is a format string, remaining elements are the format string parameters #}
  {# Validating that the number of format params equals #}
  {# the number of remaining params is handled by real python code #}
  {% with fmtStr = elts[0] %}
  {% with params = elts[1:]|map("coerce_response_name")|list %}
# {{ fmtStr|format(*params) }}
{% endwith %}
{% endwith %}
{% endmacro %}

{% macro render_define(statement) %}
{# Python code already verified the form, no need to check #}
{% with lvalue, rvalue = statement.split("=") %}
{{ lvalue }} = {{ rvalue|coerce_response_name }}
{% endwith %}
{% endmacro %}

{% macro render_collection_loop(statement) %}
for {{ statement.variable }} in {{ statement.collection|coerce_response_name }}:
    {{ dispatch_statement(statement.body) -}}
{% endmacro %}

{% macro render_map_loop(statement) %}
 {# At least one of key and value exist; validated in python #}
{% if "key" not in statement %}
for {{ statement.value }} in {{ statement.map|coerce_response_name }}.values():
{% elif "value" not in statement %}
for {{ statement.key }} in {{ statement.map|coerce_response_name }}.keys():
{% else %}
for {{statement.key }}, {{ statement.value }} in {{ statement.map|coerce_response_name }}.items():
{% endif %}
    {{ dispatch_statement(statement.body) -}}
{% endmacro %}

{% macro render_write_file(statement) %}
  {% with contents_rval = statement["contents"]|coerce_response_name %}
with open({{ print_string_formatting(statement["filename"])|trim }}, "wb") as f:
    f.write({{ contents_rval }})

  {% endwith %}
{% endmacro %}

{% macro dispatch_statement(statement) %}
{# Each statement is a dict with a single key/value pair #}
{% if "print" in statement %}
{{ render_print(statement["print"]) -}}
{% elif "comment" in statement %}
{{ render_comment(statement["comment"]) -}}
{% elif "loop" in statement %}
  {% with loop = statement["loop"] %}
    {% if "collection" in loop %}
{{ render_collection_loop(loop) -}}
    {% else %}
{{ render_map_loop(loop) -}}
    {% endif %}
  {% endwith %}
{% elif "write_file" in statement %}
{{ render_write_file(statement["write_file"]) -}}
{% endif %}
{% endmacro %}

{% macro render_request_attr(base_name, attr) %}
{# Note: python code will have manipulated the value #}
{# to be the correct enum from the right module, if necessary. #}
{# Python is also responsible for verifying that each input parameter is unique,#}
{# no parameter is a reserved keyword #}
  {% if "input_parameter" in attr %}
# {{ attr.input_parameter }} = "{{ attr.value }}"
    {% if "value_is_file" in attr and attr.value_is_file %}
with open({{ attr.input_parameter }}, "rb") as f:
    {{ base_name }}["{{ attr.field }}"] = f.read()
    {% else %}
{{ base_name }}["{{ attr.field }}"] = {{ attr.input_parameter }}
    {% endif %}
  {% else %}
{{ base_name }}["{{ attr.field }}"] = {{ attr.value }}
  {% endif %}
{% endmacro %}

{% macro render_request(request) %}
  {% for parameter_block in request %}
{{ parameter_block.base }} = {}
    {% for attr in parameter_block.body %}
{{ render_request_attr(parameter_block.base, attr) }}
    {% endfor %}
  {% endfor %}
{% endmacro %}

{% macro render_method_call(sample, calling_form, calling_form_enum) %}
{# Note: this doesn't deal with enums or unions #}
{% if calling_form not in [calling_form_enum.RequestStreamingBidi,
calling_form_enum.RequestStreamingClient] %}
client.{{ sample.rpc|snake_case }}({{ sample.request|map(attribute="base")|join(", ") }})
{% else %}
{# TODO: set up client streaming once some questions are answered #}
client.{{ sample.rpc|snake_case }}([{{ sample.request|map(attribute="base")|join("") }}])
{% endif %}
{% endmacro %}

{# Setting up the method invocation is the responsibility of the caller: #}
{# it's just easier to set up client side streaming and other things from outside this macro. #}
{% macro render_calling_form(method_invocation_text, calling_form, calling_form_enum, response_statements ) %}
{% if calling_form == calling_form_enum.Request %}
response = {{ method_invocation_text }}
{% for statement in response_statements %}
{{ dispatch_statement(statement ) }}
{% endfor %}
{% elif calling_form == calling_form_enum.RequestPagedAll %}
page_result = {{ method_invocation_text }}
for response in page_result:
  {% for statement in response_statements %}
    {{ dispatch_statement(statement ) }}
  {% endfor %}
{% elif calling_form == calling_form_enum.RequestPaged %}
page_result = {{ method_invocation_text }}
for page in page_result.pages():
    for response in page:
  {% for statement in response_statements %}
        {{ dispatch_statement(statement ) }}
  {% endfor %}
{% elif calling_form in [calling_form_enum.RequestStreamingServer,
                        calling_form_enum.RequestStreamingBidi] %}
stream = {{ method_invocation_text }}
for response in stream:
  {% for statement in response_statements %}
    {{ dispatch_statement(statement ) }}
  {% endfor %}
{% elif calling_form == calling_form_enum.LongRunningRequestPromise %}
operation = {{ method_invocation_text }}

print("Waiting for operation to complete...")

response = operation.result()
{% for statement in response_statements %}
{{ dispatch_statement(statement ) }}
{% endfor %}
{% endif %}
{% endmacro %}

{% macro render_method_name(method_name) %}
{{ method_name|snake_case -}}
{% endmacro %}

{% macro render_main_block(method_name, request_block) %}
def main():
    import argparse

    parser = argparse.ArgumentParser()
{% with arg_list = [] %}
{% for attr in request_block if "input_parameter" in attr %}
    parser.add_argument("--{{ attr.input_parameter }}",
                        type=str,
                        default="{{ attr.value }}")
{% do arg_list.append("args." + attr.input_parameter) -%}
{% endfor %}
    args = parser.parse_args()

    sample_{{ render_method_name(method_name) }}({{ arg_list|join(", ") }})


if __name__ == "__main__":
    main()
{% endwith %}
{% endmacro %}
