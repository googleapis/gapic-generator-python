{% extends '_base.py.j2' %}

{% block content %}
import pkg_resources
from typing import Mapping, Optional, Sequence, Tuple, Type, Union

from google.api_core import gapic_v1
from google.api_core import retry
from google.auth import credentials

{% for import_ in service.python_modules -%}
{{ import_ }}
{% endfor %}
from ...{{ '.' * api.subpackage_view|length }}utils import dispatch
from .transports import _transport_registry
from .transports import {{ service.name }}Transport


class {{ service.name }}:
    """{{ service.meta.doc|rst(width=72, indent=4) }}"""
    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: credentials.Credentials = None,
            transport: Union[str, {{ service.name }}Transport] = None,
            ) -> None:
        """Instantiate the {{ (service.name|snake_case).replace('_', ' ') }}.

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{- ' ' }}The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credential]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            transport (Union[str, ~.{{ service.name }}Transport]): The
                transport to use. If set to None, a transport is chosen
                automatically.
        """
        # Save or instantiate the transport.
        # Ordinarily, we provide the transport, but allowing a custom transport
        # instance provides an extensibility point for unusual situations.
        if isinstance(transport, {{ service.name }}Transport):
            if credentials:
                raise ValueError('When providing a transport instance, '
                                 'provide its credentials directly.')
            self._transport = transport
        else:
            Transport = self.get_transport_class(transport)
            self._transport = Transport(credentials=credentials, host=host)

    {% for method in service.methods.values() -%}
    {%- if method.signatures.single_dispatch -%}
    @dispatch
    {% endif -%}
    def {{ method.name|snake_case }}(self,
            request: {{ method.input.ident }}, *,
            retry: retry.Retry = None,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> {{ method.output.ident }}:
        r"""{{ method.meta.doc|rst(width=72, indent=8) }}

        Args:
            request (:class:`{{ method.input.ident.sphinx }}`):
                The request object.{{ ' ' -}}
                {{ method.input.meta.doc|wrap(width=72, offset=36, indent=16) }}
            retry (~.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            {{ method.output.ident.sphinx }}:
                {{ method.output.meta.doc|wrap(width=72, indent=16) }}
        """
        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.{{ method.name|snake_case }},
            default_retry=None,  # FIXME
            default_timeout=None,  # FIXME
            client_info=self.client_info,
        )
        {%- if method.field_headers %}

        # Certain fields should be provided within the metadata header;
        # add these here.
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata({
                {%- for field_header in method.field_headers %}
                '{{ field_header }}': request.{{ field_header }},
                {%- endfor %}
            }),
        )
        {%- endif %}

        # Send the request.
        response = rpc(request, retry=retry,
                       timeout=timeout, metadata=metadata)
        {%- if method.output.lro_response is defined %}

        # Wrap the response in an operation future
        response = operation.from_gapic(
            response,
            self._transport.operations_client,
            {{ method.output.lro_response.ident }},
            {%- if method.output.lro_metadata %}
            metadata_type={{ method.output.lro_metadata.ident }},
            {%- endif %}
        )
        {%- endif %}

        # Done; return the response.
        return response

    {% for signature in method.signatures.single_dispatch -%}
    @{{ method.name|snake_case }}.register
    def _{{ method.name|snake_case }}_with_{{ signature.dispatch_field.name|snake_case }}(self,
            {%- for field in signature.fields.values() %}
            {{ field.name  }}: {{ field.ident }}{% if loop.index0 > 0 and not field.required %} = None{% endif %},
            {%- endfor %}
            *,
            retry: retry.Retry = None,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            ) -> {{ method.output.ident }}:
        r"""{{ method.meta.doc|rst(width=72, indent=8) }}

        Args:
            {%- for field in signature.fields.values() %}
            {{ field.name }} ({{ field.ident.sphinx }}):
                {{ field.meta.doc|wrap(width=72, indent=16) }}
            {%- endfor %}
            retry (~.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent alont with the request as metadata.

        Returns:
            {{ method.output.ident.sphinx }}:
                {{ method.output.meta.doc|wrap(width=72, indent=16) }}
        """
        return self.{{ method.name|snake_case }}(
            {{ method.input.ident }}(
                {%- for field in signature.fields.values() %}
                {{ field.name }}={{ field.name }},
                {%- endfor %}
            ),
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )
    {% endfor %}
    {% endfor -%}

    @classmethod
    def get_transport_class(cls,
            label: str = None) -> Type[{{ service.name }}Transport]:
        """Return an appropriate transport class.

        Args:
            label: The name of the desired transport. If none is
                provided, then the first transport in the registry is used.

        Returns:
            The transport class to use.
        """
        # If a specific transport is requested, return that one.
        if label:
            return _transport_registry[label]

        # No transport is requested; return the default (that is, the first one
        # in the dictionary).
        return next(iter(_transport_registry.values()))

    @property
    def client_info(self) -> gapic_v1.client_info.ClientInfo:
        """Return information about this client (for metrics).

        Returns:
            client_info.ClientInfo: An object with metadata about this
                client library.
        """
        return gapic_v1.client_info.ClientInfo()


__all__ = (
    '{{ service.name }}',
)
{% endblock %}
