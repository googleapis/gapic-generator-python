{% extends "_base.py.j2" %}

{% block content %}

import os
import mock
import packaging.version

import grpc
from grpc.experimental import aio
import math
import pytest
from proto.marshal.rules.dates import DurationRule, TimestampRule

{% if 'rest' in opts.transport %}
from requests import Response
from requests.sessions import Session
{% endif %}

{# Import the service itself as well as every proto module that it imports. #}
{% filter sort_lines %}
import google.auth
from google.auth import credentials as ga_credentials
from google.auth.exceptions import MutualTLSChannelError
from google.oauth2 import service_account
from {{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }} import {{ service.client_name }}
{% if 'grpc' in opts.transport %}
from {{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }} import {{ service.async_client_name }}
{% endif %}
from {{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }} import transports
from {{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.base import _GOOGLE_AUTH_VERSION
from google.api_core import client_options
from google.api_core import exceptions as core_exceptions
from google.api_core import grpc_helpers
from google.api_core import grpc_helpers_async
{% if service.has_lro %}
from google.api_core import future
from google.api_core import operations_v1
from google.longrunning import operations_pb2
{% endif %}
from google.api_core import gapic_v1
{% for method in service.methods.values() %}
{% for ref_type in method.ref_types
   if not ((ref_type.ident.python_import.package == ('google', 'api_core') and ref_type.ident.python_import.module == 'operation')
           or ref_type.ident.python_import.package == ('google', 'protobuf') and ref_type.ident.python_import.module == 'empty_pb2') %}
{{ ref_type.ident.python_import }}
{% endfor %}
{% endfor %}
{% if opts.add_iam_methods %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import options_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% endfilter %}


# TODO(busunkim): Once google-auth >= 1.25.0 is required transitively
# through google-api-core:
# - Delete the auth "less than" test cases
# - Delete these pytest markers (Make the "greater than or equal to" tests the default).
requires_google_auth_lt_1_25_0 = pytest.mark.skipif(
    packaging.version.parse(_GOOGLE_AUTH_VERSION) >= packaging.version.parse("1.25.0"),
    reason="This test requires google-auth < 1.25.0",
)
requires_google_auth_gte_1_25_0 = pytest.mark.skipif(
    packaging.version.parse(_GOOGLE_AUTH_VERSION) < packaging.version.parse("1.25.0"),
    reason="This test requires google-auth >= 1.25.0",
)

def client_cert_source_callback():
    return b"cert bytes", b"key bytes"


# If default endpoint is localhost, then default mtls endpoint will be the same.
# This method modifies the default endpoint so the client can produce a different
# mtls endpoint for endpoint testing purposes.
def modify_default_endpoint(client):
    return "foo.googleapis.com" if ("localhost" in client.DEFAULT_ENDPOINT) else client.DEFAULT_ENDPOINT


def test__get_default_mtls_endpoint():
    api_endpoint = "example.googleapis.com"
    api_mtls_endpoint = "example.mtls.googleapis.com"
    sandbox_endpoint = "example.sandbox.googleapis.com"
    sandbox_mtls_endpoint = "example.mtls.sandbox.googleapis.com"
    non_googleapi = "api.example.com"

    assert {{ service.client_name }}._get_default_mtls_endpoint(None) is None
    assert {{ service.client_name }}._get_default_mtls_endpoint(api_endpoint) == api_mtls_endpoint
    assert {{ service.client_name }}._get_default_mtls_endpoint(api_mtls_endpoint) == api_mtls_endpoint
    assert {{ service.client_name }}._get_default_mtls_endpoint(sandbox_endpoint) == sandbox_mtls_endpoint
    assert {{ service.client_name }}._get_default_mtls_endpoint(sandbox_mtls_endpoint) == sandbox_mtls_endpoint
    assert {{ service.client_name }}._get_default_mtls_endpoint(non_googleapi) == non_googleapi


@pytest.mark.parametrize("client_class", [
    {{ service.client_name }},
    {% if 'grpc' in opts.transport %}
    {{ service.async_client_name }},
    {% endif %}
])
def test_{{ service.client_name|snake_case }}_from_service_account_info(client_class):
    creds = ga_credentials.AnonymousCredentials()
    with mock.patch.object(service_account.Credentials, 'from_service_account_info') as factory:
        factory.return_value = creds
        info = {"valid": True}
        client = client_class.from_service_account_info(info)
        assert client.transport._credentials == creds
        assert isinstance(client, client_class)

        {% if service.host %}
        assert client.transport._host == '{{ service.host }}{% if ":" not in service.host %}:443{% endif %}'
        {% endif %}


@pytest.mark.parametrize("client_class", [
    {{ service.client_name }},
    {% if 'grpc' in opts.transport %}
    {{ service.async_client_name }},
    {% endif %}
])
def test_{{ service.client_name|snake_case }}_from_service_account_file(client_class):
    creds = ga_credentials.AnonymousCredentials()
    with mock.patch.object(service_account.Credentials, 'from_service_account_file') as factory:
        factory.return_value = creds
        client = client_class.from_service_account_file("dummy/file/path.json")
        assert client.transport._credentials == creds
        assert isinstance(client, client_class)

        client = client_class.from_service_account_json("dummy/file/path.json")
        assert client.transport._credentials == creds
        assert isinstance(client, client_class)

        {% if service.host %}
        assert client.transport._host == '{{ service.host }}{% if ":" not in service.host %}:443{% endif %}'
        {% endif %}


def test_{{ service.client_name|snake_case }}_get_transport_class():
    transport = {{ service.client_name }}.get_transport_class()
    available_transports = [
        {% for transport_name in opts.transport %}
        transports.{{ service.name }}{{ transport_name.capitalize() }}Transport,
        {% endfor %}
    ]
    assert transport in available_transports

    transport = {{ service.client_name }}.get_transport_class("{{ opts.transport[0] }}")
    assert transport == transports.{{ service.name }}{{ opts.transport[0].capitalize() }}Transport


@pytest.mark.parametrize("client_class,transport_class,transport_name", [
    {% if 'grpc' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.grpc_transport_name }}, "grpc"),
    ({{ service.async_client_name }}, transports.{{ service.grpc_asyncio_transport_name }}, "grpc_asyncio"),
    {% elif 'rest' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.rest_transport_name }}, "rest"),
    {% endif %}
])
@mock.patch.object({{ service.client_name }}, "DEFAULT_ENDPOINT", modify_default_endpoint({{ service.client_name }}))
{% if 'grpc' in opts.transport %}
@mock.patch.object({{ service.async_client_name }}, "DEFAULT_ENDPOINT", modify_default_endpoint({{ service.async_client_name }}))
{% endif %}
def test_{{ service.client_name|snake_case }}_client_options(client_class, transport_class, transport_name):
    # Check that if channel is provided we won't create a new one.
    with mock.patch.object({{ service.client_name }}, 'get_transport_class') as gtc:
        transport = transport_class(
            credentials=ga_credentials.AnonymousCredentials()
        )
        client = client_class(transport=transport)
        gtc.assert_not_called()

    # Check that if channel is provided via str we will create a new one.
    with mock.patch.object({{ service.client_name }}, 'get_transport_class') as gtc:
        client = client_class(transport=transport_name)
        gtc.assert_called()

    # Check the case api_endpoint is provided.
    options = client_options.ClientOptions(api_endpoint="squid.clam.whelk")
    with mock.patch.object(transport_class, '__init__') as patched:
        patched.return_value = None
        client = client_class(client_options=options)
        patched.assert_called_once_with(
            credentials=None,
            credentials_file=None,
            host="squid.clam.whelk",
            scopes=None,
            client_cert_source_for_mtls=None,
            quota_project_id=None,
            client_info=transports.base.DEFAULT_CLIENT_INFO,
        )

    # Check the case api_endpoint is not provided and GOOGLE_API_USE_MTLS_ENDPOINT is
    # "never".
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "never"}):
        with mock.patch.object(transport_class, '__init__') as patched:
            patched.return_value = None
            client = client_class()
            patched.assert_called_once_with(
                credentials=None,
                credentials_file=None,
                host=client.DEFAULT_ENDPOINT,
                scopes=None,
                client_cert_source_for_mtls=None,
                quota_project_id=None,
                client_info=transports.base.DEFAULT_CLIENT_INFO,
            )

    # Check the case api_endpoint is not provided and GOOGLE_API_USE_MTLS_ENDPOINT is
    # "always".
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "always"}):
        with mock.patch.object(transport_class, '__init__') as patched:
            patched.return_value = None
            client = client_class()
            patched.assert_called_once_with(
                credentials=None,
                credentials_file=None,
                host=client.DEFAULT_MTLS_ENDPOINT,
                scopes=None,
                client_cert_source_for_mtls=None,
                quota_project_id=None,
                client_info=transports.base.DEFAULT_CLIENT_INFO,
            )

    # Check the case api_endpoint is not provided and GOOGLE_API_USE_MTLS_ENDPOINT has
    # unsupported value.
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "Unsupported"}):
        with pytest.raises(MutualTLSChannelError):
            client = client_class()

    # Check the case GOOGLE_API_USE_CLIENT_CERTIFICATE has unsupported value.
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": "Unsupported"}):
        with pytest.raises(ValueError):
            client = client_class()

    # Check the case quota_project_id is provided
    options = client_options.ClientOptions(quota_project_id="octopus")
    with mock.patch.object(transport_class, '__init__') as patched:
        patched.return_value = None
        client = client_class(client_options=options)
        patched.assert_called_once_with(
            credentials=None,
            credentials_file=None,
            host=client.DEFAULT_ENDPOINT,
            scopes=None,
            client_cert_source_for_mtls=None,
            quota_project_id="octopus",
            client_info=transports.base.DEFAULT_CLIENT_INFO,
        )

@pytest.mark.parametrize("client_class,transport_class,transport_name,use_client_cert_env", [
    {% if 'grpc' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.grpc_transport_name }}, "grpc", "true"),
    ({{ service.async_client_name }}, transports.{{ service.grpc_asyncio_transport_name }}, "grpc_asyncio", "true"),
    ({{ service.client_name }}, transports.{{ service.grpc_transport_name }}, "grpc", "false"),
    ({{ service.async_client_name }}, transports.{{ service.grpc_asyncio_transport_name }}, "grpc_asyncio", "false"),
    {% elif 'rest' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.rest_transport_name }}, "rest", "true"),
    ({{ service.client_name }}, transports.{{ service.rest_transport_name }}, "rest", "false"),
    {% endif %}
])
@mock.patch.object({{ service.client_name }}, "DEFAULT_ENDPOINT", modify_default_endpoint({{ service.client_name }}))
{% if 'grpc' in opts.transport %}
@mock.patch.object({{ service.async_client_name }}, "DEFAULT_ENDPOINT", modify_default_endpoint({{ service.async_client_name }}))
{% endif %}
@mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "auto"})
def test_{{ service.client_name|snake_case }}_mtls_env_auto(client_class, transport_class, transport_name, use_client_cert_env):
    # This tests the endpoint autoswitch behavior. Endpoint is autoswitched to the default
    # mtls endpoint, if GOOGLE_API_USE_CLIENT_CERTIFICATE is "true" and client cert exists.

    # Check the case client_cert_source is provided. Whether client cert is used depends on
    # GOOGLE_API_USE_CLIENT_CERTIFICATE value.
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": use_client_cert_env}):
        options = client_options.ClientOptions(client_cert_source=client_cert_source_callback)
        with mock.patch.object(transport_class, '__init__') as patched:
            patched.return_value = None
            client = client_class(client_options=options)

            if use_client_cert_env == "false":
                expected_client_cert_source = None
                expected_host = client.DEFAULT_ENDPOINT
            else:
                expected_client_cert_source = client_cert_source_callback
                expected_host = client.DEFAULT_MTLS_ENDPOINT

            patched.assert_called_once_with(
                credentials=None,
                credentials_file=None,
                host=expected_host,
                scopes=None,
                client_cert_source_for_mtls=expected_client_cert_source,
                quota_project_id=None,
                client_info=transports.base.DEFAULT_CLIENT_INFO,
            )

    # Check the case ADC client cert is provided. Whether client cert is used depends on
    # GOOGLE_API_USE_CLIENT_CERTIFICATE value.
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": use_client_cert_env}):
        with mock.patch.object(transport_class, '__init__') as patched:
            with mock.patch('google.auth.transport.mtls.has_default_client_cert_source', return_value=True):
                with mock.patch('google.auth.transport.mtls.default_client_cert_source', return_value=client_cert_source_callback):
                    if use_client_cert_env == "false":
                        expected_host = client.DEFAULT_ENDPOINT
                        expected_client_cert_source = None
                    else:
                        expected_host = client.DEFAULT_MTLS_ENDPOINT
                        expected_client_cert_source = client_cert_source_callback

                    patched.return_value = None
                    client = client_class()
                    patched.assert_called_once_with(
                        credentials=None,
                        credentials_file=None,
                        host=expected_host,
                        scopes=None,
                        client_cert_source_for_mtls=expected_client_cert_source,
                        quota_project_id=None,
                        client_info=transports.base.DEFAULT_CLIENT_INFO,
                    )

    # Check the case client_cert_source and ADC client cert are not provided.
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": use_client_cert_env}):
        with mock.patch.object(transport_class, '__init__') as patched:
            with mock.patch("google.auth.transport.mtls.has_default_client_cert_source", return_value=False):
                patched.return_value = None
                client = client_class()
                patched.assert_called_once_with(
                    credentials=None,
                    credentials_file=None,
                    host=client.DEFAULT_ENDPOINT,
                    scopes=None,
                    client_cert_source_for_mtls=None,
                    quota_project_id=None,
                    client_info=transports.base.DEFAULT_CLIENT_INFO,
                )


@pytest.mark.parametrize("client_class,transport_class,transport_name", [
    {% if 'grpc' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.grpc_transport_name }}, "grpc"),
    ({{ service.async_client_name }}, transports.{{ service.grpc_asyncio_transport_name }}, "grpc_asyncio"),
    {% elif 'rest' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.rest_transport_name }}, "rest"),
    {% endif %}
])
def test_{{ service.client_name|snake_case }}_client_options_scopes(client_class, transport_class, transport_name):
    # Check the case scopes are provided.
    options = client_options.ClientOptions(
        scopes=["1", "2"],
    )
    with mock.patch.object(transport_class, '__init__') as patched:
        patched.return_value = None
        client = client_class(client_options=options)
        patched.assert_called_once_with(
            credentials=None,
            credentials_file=None,
            host=client.DEFAULT_ENDPOINT,
            scopes=["1", "2"],
            client_cert_source_for_mtls=None,
            quota_project_id=None,
            client_info=transports.base.DEFAULT_CLIENT_INFO,
        )

@pytest.mark.parametrize("client_class,transport_class,transport_name", [
    {% if 'grpc' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.grpc_transport_name }}, "grpc"),
    ({{ service.async_client_name }}, transports.{{ service.grpc_asyncio_transport_name }}, "grpc_asyncio"),
    {% elif 'rest' in opts.transport %}
    ({{ service.client_name }}, transports.{{ service.rest_transport_name }}, "rest"),
    {% endif %}
])
def test_{{ service.client_name|snake_case }}_client_options_credentials_file(client_class, transport_class, transport_name):
    # Check the case credentials file is provided.
    options = client_options.ClientOptions(
        credentials_file="credentials.json"
    )
    with mock.patch.object(transport_class, '__init__') as patched:
        patched.return_value = None
        client = client_class(client_options=options)
        patched.assert_called_once_with(
            credentials=None,
            credentials_file="credentials.json",
            host=client.DEFAULT_ENDPOINT,
            scopes=None,
            client_cert_source_for_mtls=None,
            quota_project_id=None,
            client_info=transports.base.DEFAULT_CLIENT_INFO,
        )
{% if 'grpc' in opts.transport %}


def test_{{ service.client_name|snake_case }}_client_options_from_dict():
    with mock.patch('{{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.{{ service.name }}GrpcTransport.__init__') as grpc_transport:
        grpc_transport.return_value = None
        client = {{ service.client_name }}(
            client_options={'api_endpoint': 'squid.clam.whelk'}
        )
        grpc_transport.assert_called_once_with(
            credentials=None,
            credentials_file=None,
            host="squid.clam.whelk",
            scopes=None,
            client_cert_source_for_mtls=None,
            quota_project_id=None,
            client_info=transports.base.DEFAULT_CLIENT_INFO,
        )
{% endif %}


{% for method in service.methods.values() if 'grpc' in opts.transport %}
def test_{{ method.name|snake_case }}(transport: str = 'grpc', request_type={{ method.input.ident }}):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = request_type()
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/spam')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}(
          {% for field in method.output.fields.values() | rejectattr('message')%}
          {% if not field.oneof or field.proto3_optional %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}{% endfor %}
            {# This is a hack to only pick one field  #}
            {% for oneof_fields in method.output.oneof_fields().values() %}
            {% with field = oneof_fields[0] %}
            {{ field.name }}={{ field.mock_value }},
            {% endwith %}
            {% endfor %}
        )
        {% endif %}
        {% if method.client_streaming %}
        response = client.{{ method.name|snake_case }}(iter(requests))
        {% else %}
        response = client.{{ method.name|snake_case }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        assert args[0] == {{ method.input.ident }}()
        {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% elif method.lro %}
    assert isinstance(response, future.Future)
    {% elif method.server_streaming %}
    for message in response:
        assert isinstance(message, {{ method.output.ident }})
    {% else %}
    {% if "next_page_token" in method.output.fields.values()|map(attribute='name') and not method.paged_result_field %}
    {# Cheeser assertion to force code coverage for bad paginated methods #}
    assert response.raw_page is response
    {% endif %}
    assert isinstance(response, {{ method.client_output.ident }})
    {% for field in method.output.fields.values() | rejectattr('message') %}
    {% if not field.oneof or field.proto3_optional %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endif %}{# end oneof/optional #}
    {% endfor %}
    {% endif %}


def test_{{ method.name|snake_case }}_from_dict():
    test_{{ method.name|snake_case }}(request_type=dict)


{% if not method.client_streaming %}
def test_{{ method.name|snake_case }}_empty_call():
    # This test is a coverage failsafe to make sure that totally empty calls,
    # i.e. request == None and no flattened fields passed, work.
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc',
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        client.{{ method.name|snake_case }}()
        call.assert_called()
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        assert args[0] == {{ method.input.ident }}()
        {% endif %}
{% endif %}


@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_async(transport: str = 'grpc_asyncio', request_type={{ method.input.ident }}):
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = request_type()
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            operations_pb2.Operation(name='operations/spam')
        )
        {% elif not method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% elif method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.StreamStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% else %}
        call.return_value ={{ '' }}
            {%- if not method.client_streaming and not method.server_streaming -%}
                grpc_helpers_async.FakeUnaryUnaryCall
            {%- else -%}
                grpc_helpers_async.FakeStreamUnaryCall
            {%- endif -%}({{ method.output.ident }}(
            {% for field in method.output.fields.values() | rejectattr('message') %}{% if not field.oneof or field.proto3_optional %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}
            {% endfor %}
        ))
        {% endif %}
        {% if method.client_streaming and method.server_streaming %}
        response = await client.{{ method.name|snake_case }}(iter(requests))
        {% elif method.client_streaming and not method.server_streaming %}
        response = await (await client.{{ method.name|snake_case }}(iter(requests)))
        {% else %}
        response = await client.{{ method.name|snake_case }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        assert args[0] == {{ method.input.ident }}()
        {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% elif method.lro %}
    assert isinstance(response, future.Future)
    {% elif method.server_streaming %}
    message = await response.read()
    assert isinstance(message, {{ method.output.ident }})
    {% else %}
    assert isinstance(response, {{ method.client_output_async.ident }})
    {% for field in method.output.fields.values() | rejectattr('message') %}
    {% if not field.oneof or field.proto3_optional %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endif %}{# oneof/optional #}
    {% endfor %}
    {% endif %}


@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_async_from_dict():
    await test_{{ method.name|snake_case }}_async(request_type=dict)


{% if method.field_headers and not method.client_streaming %}
def test_{{ method.name|snake_case }}_field_headers():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = {{ method.input.ident }}()

    {% for field_header in method.field_headers %}
    request.{{ field_header }} = '{{ field_header }}/value'
    {% endfor %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        client.{{ method.name|snake_case }}(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert (
        'x-goog-request-params',
        '{% for field_header in method.field_headers -%}
        {{ field_header }}={{ field_header }}/value
        {%- if not loop.last %}&{% endif %}
        {%- endfor -%}',
    ) in kw['metadata']


@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_field_headers_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = {{ method.input.ident }}()

    {% for field_header in method.field_headers %}
    request.{{ field_header }} = '{{ field_header }}/value'
    {% endfor %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(operations_pb2.Operation(name='operations/op'))
        {% elif method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% else %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall({{ method.output.ident }}())
        {% endif %}
        await client.{{ method.name|snake_case }}(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert (
        'x-goog-request-params',
        '{% for field_header in method.field_headers -%}
        {{ field_header }}={{ field_header }}/value
        {%- if not loop.last %}&{% endif %}
        {%- endfor -%}',
    ) in kw['metadata']
{% endif %}

{% if method.ident.package != method.input.ident.package %}
def test_{{ method.name|snake_case }}_from_dict_foreign():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        response = client.{{ method.name|snake_case }}(request={
            {% for field in method.input.fields.values() %}
            '{{ field.name }}': {{ field.mock_value }},
            {% endfor %}
            }
        )
        call.assert_called()

{% endif %}

{% if method.flattened_fields %}
def test_{{ method.name|snake_case }}_flattened():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        # Call the method with a truthy value for each flattened field,
        # using the keyword arguments to the method.
        client.{{ method.name|snake_case }}(
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        {% for key, field in method.flattened_fields.items() %}{% if not field.oneof or field.proto3_optional %}
        {% if field.ident|string() == 'timestamp_pb2.Timestamp' %}
        assert TimestampRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.ident|string() == 'duration_pb2.Duration' %}
        assert DurationRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% else %}
        assert args[0].{{ key }} == {{ field.mock_value }}
        {% endif %}
        {% endif %}{% endfor %}
        {% for oneofs in method.flattened_oneof_fields().values() %}
        {% with field = oneofs[-1]  %}
        assert args[0].{{ method.flattened_field_to_key[field.name] }} == {{ field.mock_value }}
        {% endwith %}
        {% endfor %}



def test_{{ method.name|snake_case }}_flattened_error():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        client.{{ method.name|snake_case }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )


@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_flattened_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}


        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            operations_pb2.Operation(name='operations/spam')
        )
        {% elif not method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        {% elif method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.StreamStreamCall, autospec=True)
        {% else %}
        call.return_value = {{ '' }}
            {%- if not method.client_streaming and not method.server_streaming -%}
                grpc_helpers_async.FakeUnaryUnaryCall
            {%- else -%}
                grpc_helpers_async.FakeStreamUnaryCall
            {%- endif -%}({{ method.output.ident }}())
        {% endif %}
        # Call the method with a truthy value for each flattened field,
        # using the keyword arguments to the method.
        response = await client.{{ method.name|snake_case }}(
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        {% for key, field in method.flattened_fields.items() %}{% if not field.oneof or field.proto3_optional %}
        {% if field.ident|string() == 'timestamp_pb2.Timestamp' %}
        assert TimestampRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.ident|string() == 'duration_pb2.Duration' %}
        assert DurationRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% else %}
        assert args[0].{{ key }} == {{ field.mock_value }}
        {% endif %}
        {% endif %}{% endfor %}
        {% for oneofs in method.flattened_oneof_fields().values() %}
        {% with field = oneofs[-1]  %}
        assert args[0].{{ method.flattened_field_to_key[field.name] }} == {{ field.mock_value }}
        {% endwith %}
        {% endfor %}


@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_flattened_error_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        await client.{{ method.name|snake_case }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )
{% endif %}


{% if method.paged_result_field %}
def test_{{ method.name|snake_case }}_pager():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Set the response to a series of pages.
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )

        metadata = ()
        {% if method.field_headers %}
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                {% for field_header in method.field_headers %}
                {% if not method.client_streaming %}
                ('{{ field_header }}', ''),
                {% endif %}
                {% endfor %}
            )),
        )
        {% endif %}
        pager = client.{{ method.name|snake_case }}(request={})

        assert pager._metadata == metadata

        results = [i for i in pager]
        assert len(results) == 6
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                   for i in results)

def test_{{ method.name|snake_case }}_pages():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__') as call:
        # Set the response to a series of pages.
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )
        pages = list(client.{{ method.name|snake_case }}(request={}).pages)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token

@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_async_pager():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__', new_callable=mock.AsyncMock) as call:
        # Set the response to a series of pages.
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )
        async_pager = await client.{{ method.name|snake_case }}(request={},)
        assert async_pager.next_page_token == 'abc'
        responses = []
        async for response in async_pager:
            responses.append(response)

        assert len(responses) == 6
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                   for i in responses)

@pytest.mark.asyncio
async def test_{{ method.name|snake_case }}_async_pages():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.name|snake_case }}),
            '__call__', new_callable=mock.AsyncMock) as call:
        # Set the response to a series of pages.
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )
        pages = []
        async for page_ in (await client.{{ method.name|snake_case }}(request={})).pages:
            pages.append(page_)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token
{% elif method.lro and "next_page_token" in method.lro.response_type.fields.keys() %}
def test_{{ method.name|snake_case }}_raw_page_lro():
    response = {{ method.lro.response_type.ident }}()
    assert response.raw_page is response
{% endif %} {# method.paged_result_field #}

{% endfor %} {# method in methods for grpc #}

{% for method in service.methods.values() if 'rest' in opts.transport %}
def test_{{ method.name|snake_case }}_rest(transport: str = 'rest', request_type={{ method.input.ident }}):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = request_type()
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(Session, 'request') as req:
        # Designate an appropriate value for the returned response.
        {% if method.void %}
        return_value = None
        {% elif method.lro %}
        return_value = operations_pb2.Operation(name='operations/spam')
        {% elif method.server_streaming %}
        return_value = iter([{{ method.output.ident }}()])
        {% else %}
        return_value = {{ method.output.ident }}(
            {% for field in method.output.fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )
        {% endif %}

        # Wrap the value into a proper Response obj
        json_return_value = {{ method.output.ident }}.to_json(return_value)
        response_value = Response()
        response_value.status_code = 200
        response_value._content = json_return_value.encode('UTF-8')
        req.return_value = response_value
        {% if method.client_streaming %}
        response = client.{{ method.name|snake_case }}(iter(requests))
        {% else %}
        response = client.{{ method.name|snake_case }}(request)
        {% endif %}

    {% if "next_page_token" in method.output.fields.values()|map(attribute='name') and not method.paged_result_field %}
    {# Cheeser assertion to force code coverage for bad paginated methods #}
    assert response.raw_page is response
    {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% else %}
    assert isinstance(response, {{ method.client_output.ident }})
    {% for field in method.output.fields.values() %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endfor %}
    {% endif %}


def test_{{ method.name|snake_case }}_rest_from_dict():
    test_{{ method.name|snake_case }}_rest(request_type=dict)


def test_{{ method.name|snake_case }}_rest_flattened():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(Session, 'request') as req:
        # Designate an appropriate value for the returned response.
        {% if method.void %}
        return_value = None
        {% elif method.lro %}
        return_value = operations_pb2.Operation(name='operations/spam')
        {% elif method.server_streaming %}
        return_value = iter([{{ method.output.ident }}()])
        {% else %}
        return_value = {{ method.output.ident }}()
        {% endif %}

        # Wrap the value into a proper Response obj
        json_return_value = {{ method.output.ident }}.to_json(return_value)
        response_value = Response()
        response_value.status_code = 200
        response_value._content = json_return_value.encode('UTF-8')
        req.return_value = response_value

        # Call the method with a truthy value for each flattened field,
        # using the keyword arguments to the method.
        {% for field in method.flattened_fields.values() if field.field_pb is msg_field_pb %}
        {{ field.name }} = {{ field.mock_value }}
        {% endfor %}
        client.{{ method.name|snake_case }}(
            {% for field in method.flattened_fields.values() %}
            {% if field.field_pb is msg_field_pb %}
            {{ field.name }}={{ field.name }},
            {% else %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}
            {% endfor %}
        )

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(req.mock_calls) == 1
        _, http_call, http_params = req.mock_calls[0]
        body = http_params.get('data')
        {% for key, field in method.flattened_fields.items() %}
        {% if not field.oneof or field.proto3_optional %}
        {% if field.ident|string() == 'timestamp_pb2.Timestamp' %}
        assert TimestampRule().to_proto(http_call[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.ident|string() == 'duration_pb2.Duration' %}
        assert DurationRule().to_proto(http_call[0].{{ key }}) == {{ field.mock_value }}
        {% else %}
        assert {% if field.field_pb is msg_field_pb %}{{ field.ident }}.to_json({{ field.name }}, including_default_value_fields=False, use_integers_for_enums=False)
               {%- elif field.field_pb is str_field_pb %}{{ field.mock_value }}
               {%- else %}str({{ field.mock_value }})
               {%- endif %} in http_call[1] + str(body)
        {% endif %}
        {% endif %}{% endfor %}


def test_{{ method.name|snake_case }}_rest_flattened_error():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        client.{{ method.name|snake_case }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )


{% if method.paged_result_field %}
def test_{{ method.name|snake_case }}_pager():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(Session, 'request') as req:
        # Set the response as a series of pages
        {% if method.paged_result_field.map%}
        response = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'a':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'b':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'c':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={},
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'g':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'h':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'i':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
            ),
        )
        {% else %}
        response = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
        )
        {% endif %}
        # Two responses for two calls
        response = response + response

        # Wrap the values into proper Response objs
        response = tuple({{ method.output.ident }}.to_json(x) for x in response)
        return_values = tuple(Response() for i in response)
        for return_val, response_val in zip(return_values, response):
            return_val._content = response_val.encode('UTF-8')
            return_val.status_code = 200
        req.side_effect = return_values

        metadata = ()
        {% if method.field_headers %}
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                {% for field_header in method.field_headers %}
                {% if not method.client_streaming %}
                ('{{ field_header }}', ''),
                {% endif %}
                {% endfor %}
            )),
        )
        {% endif %}
        pager = client.{{ method.name|snake_case }}(request={})

        assert pager._metadata == metadata

        {% if method.paged_result_field.map %}
        assert isinstance(pager.get('a'), {{ method.paged_result_field.type.fields.get('value').ident }})
        assert pager.get('h') is None
        {% endif %}

        results = list(pager)
        assert len(results) == 6
        {% if method.paged_result_field.map %}
        assert all(
            isinstance(i, tuple)
                   for i in results)
        for result in results:
            assert isinstance(result, tuple)
            assert tuple(type(t) for t in result) == (str, {{ method.paged_result_field.type.fields.get('value').ident }})

        assert pager.get('a') is None
        assert isinstance(pager.get('h'), {{ method.paged_result_field.type.fields.get('value').ident }})
        {% else %}
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                   for i in results)
        {% endif %}

        pages = list(client.{{ method.name|snake_case }}(request={}).pages)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token


{% endif %}{# paged methods #}
{% endfor %}{# method in methods for rest #}
def test_credentials_transport_error():
    # It is an error to provide credentials and a transport instance.
    transport = transports.{{ service.name }}{{ opts.transport[0].capitalize() }}Transport(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    with pytest.raises(ValueError):
        client = {{ service.client_name }}(
            credentials=ga_credentials.AnonymousCredentials(),
            transport=transport,
        )

    # It is an error to provide a credentials file and a transport instance.
    transport = transports.{{ service.name }}{{ opts.transport[0].capitalize() }}Transport(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    with pytest.raises(ValueError):
        client = {{ service.client_name }}(
            client_options={"credentials_file": "credentials.json"},
            transport=transport,
        )

    # It is an error to provide scopes and a transport instance.
    transport = transports.{{ service.name }}{{ opts.transport[0].capitalize() }}Transport(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    with pytest.raises(ValueError):
        client = {{ service.client_name }}(
            client_options={"scopes": ["1", "2"]},
            transport=transport,
        )


def test_transport_instance():
    # A client may be instantiated with a custom transport instance.
    transport = transports.{{ service.name }}{{ opts.transport[0].capitalize() }}Transport(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    client = {{ service.client_name }}(transport=transport)
    assert client.transport is transport

{% if 'grpc' in opts.transport %}
def test_transport_get_channel():
    # A client may be instantiated with a custom transport instance.
    transport = transports.{{ service.name }}GrpcTransport(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    channel = transport.grpc_channel
    assert channel

    transport = transports.{{ service.grpc_asyncio_transport_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    channel = transport.grpc_channel
    assert channel
{% endif %}

@pytest.mark.parametrize("transport_class", [
    {% if 'grpc' in opts.transport %}
    transports.{{ service.grpc_transport_name }},
    transports.{{ service.grpc_asyncio_transport_name }},
    {% elif 'rest' in opts.transport %}
    transports.{{ service.rest_transport_name }},
    {% endif %}
])
def test_transport_adc(transport_class):
    # Test default credentials are used if not provided.
    with mock.patch.object(google.auth, 'default') as adc:
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport_class()
        adc.assert_called_once()

{% if 'grpc' in opts.transport %}
def test_transport_grpc_default():
    # A client should use the gRPC transport by default.
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    assert isinstance(
        client.transport,
        transports.{{ service.name }}GrpcTransport,
    )
{% endif %}

def test_{{ service.name|snake_case }}_base_transport_error():
    # Passing both a credentials object and credentials_file should raise an error
    with pytest.raises(core_exceptions.DuplicateCredentialArgs):
        transport = transports.{{ service.name }}Transport(
            credentials=ga_credentials.AnonymousCredentials(),
            credentials_file="credentials.json"
        )


def test_{{ service.name|snake_case }}_base_transport():
    # Instantiate the base transport.
    with mock.patch('{{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.{{ service.name }}Transport.__init__') as Transport:
        Transport.return_value = None
        transport = transports.{{ service.name }}Transport(
            credentials=ga_credentials.AnonymousCredentials(),
        )

    # Every method on the transport should just blindly
    # raise NotImplementedError.
    methods = (
        {% for method in service.methods.values() %}
        '{{ method.name|snake_case }}',
        {% endfor %}
        {% if opts.add_iam_methods %}
        'set_iam_policy',
        'get_iam_policy',
        'test_iam_permissions',
        {% endif %}
    )
    for method in methods:
        with pytest.raises(NotImplementedError):
            getattr(transport, method)(request=object())

    {% if service.has_lro %}
    # Additionally, the LRO client (a property) should
    # also raise NotImplementedError
    with pytest.raises(NotImplementedError):
        transport.operations_client
    {% endif %}


@requires_google_auth_gte_1_25_0
def test_{{ service.name|snake_case }}_base_transport_with_credentials_file():
    # Instantiate the base transport with a credentials file
    with mock.patch.object(google.auth, 'load_credentials_from_file', autospec=True) as load_creds, mock.patch('{{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.{{ service.name }}Transport._prep_wrapped_messages') as Transport:
        Transport.return_value = None
        load_creds.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport = transports.{{ service.name }}Transport(
            credentials_file="credentials.json",
            quota_project_id="octopus",
        )
        load_creds.assert_called_once_with("credentials.json",
            scopes=None,
            default_scopes=(
            {% for scope in service.oauth_scopes %}
            '{{ scope }}',
            {% endfor %}),
            quota_project_id="octopus",
        )


@requires_google_auth_lt_1_25_0
def test_{{ service.name|snake_case }}_base_transport_with_credentials_file_old_google_auth():
    # Instantiate the base transport with a credentials file
    with mock.patch.object(google.auth, 'load_credentials_from_file', autospec=True) as load_creds, mock.patch('{{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.{{ service.name }}Transport._prep_wrapped_messages') as Transport:
        Transport.return_value = None
        load_creds.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport = transports.{{ service.name }}Transport(
            credentials_file="credentials.json",
            quota_project_id="octopus",
        )
        load_creds.assert_called_once_with("credentials.json", scopes=(
            {% for scope in service.oauth_scopes %}
            '{{ scope }}',
            {% endfor %}
            ),
            quota_project_id="octopus",
        )


def test_{{ service.name|snake_case }}_base_transport_with_adc():
    # Test the default credentials are used if credentials and credentials_file are None.
    with mock.patch.object(google.auth, 'default', autospec=True) as adc, mock.patch('{{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services.{{ service.name|snake_case }}.transports.{{ service.name }}Transport._prep_wrapped_messages') as Transport:
        Transport.return_value = None
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport = transports.{{ service.name }}Transport()
        adc.assert_called_once()


@requires_google_auth_gte_1_25_0
def test_{{ service.name|snake_case }}_auth_adc():
    # If no credentials are provided, we should use ADC credentials.
    with mock.patch.object(google.auth, 'default', autospec=True) as adc:
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        {{ service.client_name }}()
        adc.assert_called_once_with(
            scopes=None,
            default_scopes=(
            {% for scope in service.oauth_scopes %}
            '{{ scope }}',
            {% endfor %}),
            quota_project_id=None,
        )


@requires_google_auth_lt_1_25_0
def test_{{ service.name|snake_case }}_auth_adc_old_google_auth():
    # If no credentials are provided, we should use ADC credentials.
    with mock.patch.object(google.auth, 'default', autospec=True) as adc:
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        {{ service.client_name }}()
        adc.assert_called_once_with(
            scopes=(
                {%- for scope in service.oauth_scopes %}
                '{{ scope }}',
                {%- endfor %}),
            quota_project_id=None,
        )


{% if 'grpc' in opts.transport %}
@pytest.mark.parametrize(
    "transport_class",
    [
        transports.{{ service.name }}GrpcTransport,
        transports.{{ service.name }}GrpcAsyncIOTransport,
    ],
)
@requires_google_auth_gte_1_25_0
def test_{{ service.name|snake_case }}_transport_auth_adc(transport_class):
    # If credentials and host are not provided, the transport class should use
    # ADC credentials.
    with mock.patch.object(google.auth, 'default', autospec=True) as adc:
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport_class(quota_project_id="octopus", scopes=["1", "2"])
        adc.assert_called_once_with(
            scopes=["1", "2"],
            default_scopes=(
                {%- for scope in service.oauth_scopes %}
                '{{ scope }}',
                {%- endfor %}),
            quota_project_id="octopus",
        )


@pytest.mark.parametrize(
    "transport_class",
    [
        transports.{{ service.name }}GrpcTransport,
        transports.{{ service.name }}GrpcAsyncIOTransport,
    ],
)
@requires_google_auth_lt_1_25_0
def test_{{ service.name|snake_case }}_transport_auth_adc_old_google_auth(transport_class):
    # If credentials and host are not provided, the transport class should use
    # ADC credentials.
    with mock.patch.object(google.auth, "default", autospec=True) as adc:
        adc.return_value = (ga_credentials.AnonymousCredentials(), None)
        transport_class(quota_project_id="octopus")
        adc.assert_called_once_with(scopes=(
            {% for scope in service.oauth_scopes %}
            '{{ scope }}',
            {% endfor %}),
            quota_project_id="octopus",
        )


@pytest.mark.parametrize(
    "transport_class,grpc_helpers",
    [
        (transports.{{ service.name }}GrpcTransport, grpc_helpers),
        (transports.{{ service.name }}GrpcAsyncIOTransport, grpc_helpers_async)
    ],
)
def test_{{ service.name|snake_case }}_transport_create_channel(transport_class, grpc_helpers):
    # If credentials and host are not provided, the transport class should use
    # ADC credentials.
    with mock.patch.object(google.auth, "default", autospec=True) as adc, mock.patch.object(
        grpc_helpers, "create_channel", autospec=True
    ) as create_channel:
        creds = ga_credentials.AnonymousCredentials()
        adc.return_value = (creds, None)
        transport_class(
            quota_project_id="octopus",
            scopes=["1", "2"]
        )

        {% with host = (service.host|default('localhost', true)) %}
        create_channel.assert_called_with(
            "{{ host }}{% if ":" not in service.host %}:443{% endif %}",
            credentials=creds,
            credentials_file=None,
            quota_project_id="octopus",
            default_scopes=(
                {% for scope in service.oauth_scopes %}
                '{{ scope }}',
                {% endfor %}),
            scopes=["1", "2"],
            default_host="{{ host }}",
            ssl_credentials=None,
            options=[
                ("grpc.max_send_message_length", -1),
                ("grpc.max_receive_message_length", -1),
            ],
        )
        {% endwith %}

{% endif %}

{% if 'grpc' in opts.transport %}
@pytest.mark.parametrize("transport_class", [transports.{{ service.grpc_transport_name }}, transports.{{ service.grpc_asyncio_transport_name }}])
def test_{{ service.name|snake_case }}_grpc_transport_client_cert_source_for_mtls(
    transport_class
):
    cred = ga_credentials.AnonymousCredentials()

    # Check ssl_channel_credentials is used if provided.
    with mock.patch.object(transport_class, "create_channel") as mock_create_channel:
        mock_ssl_channel_creds = mock.Mock()
        transport_class(
            host="squid.clam.whelk",
            credentials=cred,
            ssl_channel_credentials=mock_ssl_channel_creds
        )
        mock_create_channel.assert_called_once_with(
            "squid.clam.whelk:443",
            credentials=cred,
            credentials_file=None,
            scopes=(
                {% for scope in service.oauth_scopes %}
                '{{ scope }}',
                {% endfor %}
            ),
            ssl_credentials=mock_ssl_channel_creds,
            quota_project_id=None,
            options=[
                ("grpc.max_send_message_length", -1),
                ("grpc.max_receive_message_length", -1),
            ],
        )

    # Check if ssl_channel_credentials is not provided, then client_cert_source_for_mtls
    # is used.
    with mock.patch.object(transport_class, "create_channel", return_value=mock.Mock()):
        with mock.patch("grpc.ssl_channel_credentials") as mock_ssl_cred:
            transport_class(
                credentials=cred,
                client_cert_source_for_mtls=client_cert_source_callback
            )
            expected_cert, expected_key = client_cert_source_callback()
            mock_ssl_cred.assert_called_once_with(
                certificate_chain=expected_cert,
                private_key=expected_key
            )
{% endif %}

{% if 'rest' in opts.transport %}
def test_{{ service.name|snake_case }}_http_transport_client_cert_source_for_mtls():
    cred = ga_credentials.AnonymousCredentials()
    with mock.patch("google.auth.transport.requests.AuthorizedSession.configure_mtls_channel") as mock_configure_mtls_channel:
        transports.{{ service.rest_transport_name }} (
            credentials=cred,
            client_cert_source_for_mtls=client_cert_source_callback
        )
        mock_configure_mtls_channel.assert_called_once_with(client_cert_source_callback)
{% endif %}

def test_{{ service.name|snake_case }}_host_no_port():
    {% with host = (service.host|default('localhost', true)).split(':')[0] %}
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        client_options=client_options.ClientOptions(api_endpoint='{{ host }}'),
    )
    assert client.transport._host == '{{ host }}:443'
    {% endwith %}


def test_{{ service.name|snake_case }}_host_with_port():
    {% with host = (service.host|default('localhost', true)).split(':')[0] %}
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        client_options=client_options.ClientOptions(api_endpoint='{{ host }}:8000'),
    )
    assert client.transport._host == '{{ host }}:8000'
    {% endwith %}

{% if 'grpc' in opts.transport %}
def test_{{ service.name|snake_case }}_grpc_transport_channel():
    channel = grpc.secure_channel('http://localhost/', grpc.local_channel_credentials())

    # Check that channel is used if provided.
    transport = transports.{{ service.name }}GrpcTransport(
        host="squid.clam.whelk",
        channel=channel,
    )
    assert transport.grpc_channel == channel
    assert transport._host == "squid.clam.whelk:443"
    assert transport._ssl_channel_credentials == None


def test_{{ service.name|snake_case }}_grpc_asyncio_transport_channel():
    channel = aio.secure_channel('http://localhost/', grpc.local_channel_credentials())

    # Check that channel is used if provided.
    transport = transports.{{ service.name }}GrpcAsyncIOTransport(
        host="squid.clam.whelk",
        channel=channel,
    )
    assert transport.grpc_channel == channel
    assert transport._host == "squid.clam.whelk:443"
    assert transport._ssl_channel_credentials == None


# Remove this test when deprecated arguments (api_mtls_endpoint, client_cert_source) are
# removed from grpc/grpc_asyncio transport constructor.
@pytest.mark.parametrize("transport_class", [transports.{{ service.grpc_transport_name }}, transports.{{ service.grpc_asyncio_transport_name }}])
def test_{{ service.name|snake_case }}_transport_channel_mtls_with_client_cert_source(
    transport_class
):
    with mock.patch("grpc.ssl_channel_credentials", autospec=True) as grpc_ssl_channel_cred:
        with mock.patch.object(transport_class, "create_channel") as grpc_create_channel:
            mock_ssl_cred = mock.Mock()
            grpc_ssl_channel_cred.return_value = mock_ssl_cred

            mock_grpc_channel = mock.Mock()
            grpc_create_channel.return_value = mock_grpc_channel

            cred = ga_credentials.AnonymousCredentials()
            with pytest.warns(DeprecationWarning):
                with mock.patch.object(google.auth, 'default') as adc:
                    adc.return_value = (cred, None)
                    transport = transport_class(
                        host="squid.clam.whelk",
                        api_mtls_endpoint="mtls.squid.clam.whelk",
                        client_cert_source=client_cert_source_callback,
                    )
                    adc.assert_called_once()

            grpc_ssl_channel_cred.assert_called_once_with(
                certificate_chain=b"cert bytes", private_key=b"key bytes"
            )
            grpc_create_channel.assert_called_once_with(
                "mtls.squid.clam.whelk:443",
                credentials=cred,
                credentials_file=None,
                scopes=(
                    {% for scope in service.oauth_scopes %}
                    '{{ scope }}',
                    {% endfor %}
                ),
                ssl_credentials=mock_ssl_cred,
                quota_project_id=None,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )
            assert transport.grpc_channel == mock_grpc_channel
            assert transport._ssl_channel_credentials == mock_ssl_cred


# Remove this test when deprecated arguments (api_mtls_endpoint, client_cert_source) are
# removed from grpc/grpc_asyncio transport constructor.
@pytest.mark.parametrize("transport_class", [transports.{{ service.grpc_transport_name }}, transports.{{ service.grpc_asyncio_transport_name }}])
def test_{{ service.name|snake_case }}_transport_channel_mtls_with_adc(
    transport_class
):
    mock_ssl_cred = mock.Mock()
    with mock.patch.multiple(
        "google.auth.transport.grpc.SslCredentials",
        __init__=mock.Mock(return_value=None),
        ssl_credentials=mock.PropertyMock(return_value=mock_ssl_cred),
    ):
        with mock.patch.object(transport_class, "create_channel") as grpc_create_channel:
            mock_grpc_channel = mock.Mock()
            grpc_create_channel.return_value = mock_grpc_channel
            mock_cred = mock.Mock()

            with pytest.warns(DeprecationWarning):
                transport = transport_class(
                    host="squid.clam.whelk",
                    credentials=mock_cred,
                    api_mtls_endpoint="mtls.squid.clam.whelk",
                    client_cert_source=None,
                )

            grpc_create_channel.assert_called_once_with(
                "mtls.squid.clam.whelk:443",
                credentials=mock_cred,
                credentials_file=None,
                scopes=(
                    {% for scope in service.oauth_scopes %}
                    '{{ scope }}',
                    {% endfor %}
                ),
                ssl_credentials=mock_ssl_cred,
                quota_project_id=None,
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )
            assert transport.grpc_channel == mock_grpc_channel


{% if service.has_lro %}
def test_{{ service.name|snake_case }}_grpc_lro_client():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc',
    )
    transport = client.transport

    # Ensure that we have a api-core operations client.
    assert isinstance(
        transport.operations_client,
        operations_v1.OperationsClient,
    )

    # Ensure that subsequent calls to the property send the exact same object.
    assert transport.operations_client is transport.operations_client


def test_{{ service.name|snake_case }}_grpc_lro_async_client():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc_asyncio',
    )
    transport = client.transport

    # Ensure that we have a api-core operations client.
    assert isinstance(
        transport.operations_client,
        operations_v1.OperationsAsyncClient,
    )

    # Ensure that subsequent calls to the property send the exact same object.
    assert transport.operations_client is transport.operations_client

{% endif %}
{% endif %} {# if grpc in opts #}

{% with molluscs = cycler("squid", "clam", "whelk", "octopus", "oyster", "nudibranch", "cuttlefish", "mussel", "winkle", "nautilus", "scallop", "abalone") %}
{% for message in service.resource_messages|sort(attribute="resource_type") %}
def test_{{ message.resource_type|snake_case }}_path():
    {% for arg in message.resource_path_args %}
    {{ arg }} = "{{ molluscs.next() }}"
    {% endfor %}
    expected = "{{ message.resource_path }}".format({% for arg in message.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})
    actual = {{ service.client_name }}.{{ message.resource_type|snake_case }}_path({{message.resource_path_args|join(", ") }})
    assert expected == actual


def test_parse_{{ message.resource_type|snake_case }}_path():
    expected = {
    {% for arg in message.resource_path_args %}
        "{{ arg }}": "{{ molluscs.next() }}",
    {% endfor %}
    }
    path = {{ service.client_name }}.{{ message.resource_type|snake_case }}_path(**expected)

    # Check that the path construction is reversible.
    actual = {{ service.client_name }}.parse_{{ message.resource_type|snake_case }}_path(path)
    assert expected == actual

{% endfor %}
{% for resource_msg in service.common_resources.values()|sort(attribute="type_name") %}
def test_common_{{ resource_msg.message_type.resource_type|snake_case }}_path():
    {% for arg in resource_msg.message_type.resource_path_args %}
    {{ arg }} = "{{ molluscs.next() }}"
    {% endfor %}
    expected = "{{ resource_msg.message_type.resource_path }}".format({% for arg in resource_msg.message_type.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})
    actual = {{ service.client_name }}.common_{{ resource_msg.message_type.resource_type|snake_case }}_path({{ resource_msg.message_type.resource_path_args|join(", ") }})
    assert expected == actual


def test_parse_common_{{ resource_msg.message_type.resource_type|snake_case }}_path():
    expected = {
    {% for arg in resource_msg.message_type.resource_path_args %}
        "{{ arg }}": "{{ molluscs.next() }}",
    {% endfor %}
    }
    path = {{ service.client_name }}.common_{{ resource_msg.message_type.resource_type|snake_case }}_path(**expected)

    # Check that the path construction is reversible.
    actual = {{ service.client_name }}.parse_common_{{ resource_msg.message_type.resource_type|snake_case }}_path(path)
    assert expected == actual

{% endfor %} {# common resources#}
{% endwith %} {# cycler #}


def test_client_withDEFAULT_CLIENT_INFO():
    client_info = gapic_v1.client_info.ClientInfo()

    with mock.patch.object(transports.{{ service.name }}Transport, '_prep_wrapped_messages') as prep:
        client = {{ service.client_name }}(
            credentials=ga_credentials.AnonymousCredentials(),
            client_info=client_info,
        )
        prep.assert_called_once_with(client_info)

    with mock.patch.object(transports.{{ service.name }}Transport, '_prep_wrapped_messages') as prep:
        transport_class = {{ service.client_name }}.get_transport_class()
        transport = transport_class(
            credentials=ga_credentials.AnonymousCredentials(),
            client_info=client_info,
        )
        prep.assert_called_once_with(client_info)


{% if opts.add_iam_methods and 'grpc' in opts.transport %}
def test_set_iam_policy(transport: str = "grpc"):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.SetIamPolicyRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.set_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = policy_pb2.Policy(version=774, etag=b"etag_blob",)

        response = client.set_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, policy_pb2.Policy)

    assert response.version == 774

    assert response.etag == b"etag_blob"


@pytest.mark.asyncio
async def test_set_iam_policy_async(transport: str = "grpc_asyncio"):
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.SetIamPolicyRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.set_iam_policy), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            policy_pb2.Policy(version=774, etag=b"etag_blob",)
        )

        response = await client.set_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, policy_pb2.Policy)

    assert response.version == 774

    assert response.etag == b"etag_blob"


def test_set_iam_policy_field_headers():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.SetIamPolicyRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.set_iam_policy), "__call__") as call:
        call.return_value = policy_pb2.Policy()

        client.set_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


@pytest.mark.asyncio
async def test_set_iam_policy_field_headers_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.SetIamPolicyRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.set_iam_policy), "__call__"
    ) as call:
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(policy_pb2.Policy())

        await client.set_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


def test_set_iam_policy_from_dict():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.set_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = policy_pb2.Policy()

        response = client.set_iam_policy(
            request={
                "resource": "resource_value",
                "policy": policy_pb2.Policy(version=774),
            }
        )
        call.assert_called()


@pytest.mark.asyncio
async def test_set_iam_policy_from_dict_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.set_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            policy_pb2.Policy()
        )

        response = await client.set_iam_policy(
            request={
                "resource": "resource_value",
                "policy": policy_pb2.Policy(version=774),
            }
        )
        call.assert_called()


def test_get_iam_policy(transport: str = "grpc"):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.GetIamPolicyRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.get_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = policy_pb2.Policy(version=774, etag=b"etag_blob",)

        response = client.get_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, policy_pb2.Policy)

    assert response.version == 774

    assert response.etag == b"etag_blob"


@pytest.mark.asyncio
async def test_get_iam_policy_async(transport: str = "grpc_asyncio"):
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.GetIamPolicyRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.get_iam_policy), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            policy_pb2.Policy(version=774, etag=b"etag_blob",)
        )

        response = await client.get_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, policy_pb2.Policy)

    assert response.version == 774

    assert response.etag == b"etag_blob"


def test_get_iam_policy_field_headers():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.GetIamPolicyRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.get_iam_policy), "__call__") as call:
        call.return_value = policy_pb2.Policy()

        client.get_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


@pytest.mark.asyncio
async def test_get_iam_policy_field_headers_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.GetIamPolicyRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.get_iam_policy), "__call__"
    ) as call:
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(policy_pb2.Policy())

        await client.get_iam_policy(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


def test_get_iam_policy_from_dict():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.get_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = policy_pb2.Policy()

        response = client.get_iam_policy(
            request={
                "resource": "resource_value",
                "options": options_pb2.GetPolicyOptions(requested_policy_version=2598),
            }
        )
        call.assert_called()

@pytest.mark.asyncio
async def test_get_iam_policy_from_dict_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(type(client.transport.get_iam_policy), "__call__") as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            policy_pb2.Policy()
        )

        response = await client.get_iam_policy(
            request={
                "resource": "resource_value",
                "options": options_pb2.GetPolicyOptions(requested_policy_version=2598),
            }
        )
        call.assert_called()


def test_test_iam_permissions(transport: str = "grpc"):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.TestIamPermissionsRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = iam_policy_pb2.TestIamPermissionsResponse(
            permissions=["permissions_value"],
        )

        response = client.test_iam_permissions(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, iam_policy_pb2.TestIamPermissionsResponse)

    assert response.permissions == ["permissions_value"]


@pytest.mark.asyncio
async def test_test_iam_permissions_async(transport: str = "grpc_asyncio"):
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(), transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = iam_policy_pb2.TestIamPermissionsRequest()

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            iam_policy_pb2.TestIamPermissionsResponse(permissions=["permissions_value"],)
        )

        response = await client.test_iam_permissions(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]

        assert args[0] == request

    # Establish that the response is the type that we expect.
    assert isinstance(response, iam_policy_pb2.TestIamPermissionsResponse)

    assert response.permissions == ["permissions_value"]


def test_test_iam_permissions_field_headers():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.TestIamPermissionsRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        call.return_value = iam_policy_pb2.TestIamPermissionsResponse()

        client.test_iam_permissions(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


@pytest.mark.asyncio
async def test_test_iam_permissions_field_headers_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = iam_policy_pb2.TestIamPermissionsRequest()
    request.resource = "resource/value"

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            iam_policy_pb2.TestIamPermissionsResponse()
        )

        await client.test_iam_permissions(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert ("x-goog-request-params", "resource=resource/value",) in kw["metadata"]


def test_test_iam_permissions_from_dict():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = iam_policy_pb2.TestIamPermissionsResponse()

        response = client.test_iam_permissions(
            request={
                "resource": "resource_value",
                "permissions": ["permissions_value"],
            }
        )
        call.assert_called()

@pytest.mark.asyncio
async def test_test_iam_permissions_from_dict_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
        type(client.transport.test_iam_permissions), "__call__"
    ) as call:
        # Designate an appropriate return value for the call.
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            iam_policy_pb2.TestIamPermissionsResponse()
        )

        response = await client.test_iam_permissions(
            request={
                "resource": "resource_value",
                "permissions": ["permissions_value"],
            }
        )
        call.assert_called()

{% endif %}

{% endblock %}
