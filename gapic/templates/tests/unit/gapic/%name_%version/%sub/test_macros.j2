{% macro grpc_required_tests(method, service, api, full_extended_lro=False) %}
{% with method_name = method.safe_name|snake_case + "_unary" if method.extended_lro and not full_extended_lro else method.safe_name|snake_case, method_output = method.extended_lro.operation_type if method.extended_lro and not full_extended_lro else method.output %}
{% with uuid4_re = "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}" %}
@pytest.mark.parametrize("request_type", [
  {{ method.input.ident }},
  dict,
])
def test_{{ method_name }}(request_type, transport: str = 'grpc'):
    {% with auto_populated_field_sample_value = "explicit value for autopopulate-able field" %}
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = request_type()
    {# Set UUID4 fields so that they are not automatically populated. #}
    {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
    {% if method_settings is not none %}
    {% for auto_populated_field in method_settings.auto_populated_fields %}
    if isinstance(request, dict):
        request['{{ auto_populated_field }}'] = "{{ auto_populated_field_sample_value }}"
    else:
        request.{{ auto_populated_field }} = "{{ auto_populated_field_sample_value }}"
    {% endfor %}
    {% endif %}{# if method_settings is not none #}
    {% endwith %}{# method_settings #}
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/spam')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}(
          {% for field in method.output.fields.values() | rejectattr('message')%}
          {% if not field.oneof or field.proto3_optional %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}{% endfor %}
            {# This is a hack to only pick one field #}
            {% for oneof_fields in method.output.oneof_fields().values() %}
            {# Take the first non-message oneof field. In the corner case when all the fields of a oneof are messages, the oneof will not be populated #}
            {# Use an outer if-statement here because `first` raises an error if called on an empty sequence #}
            {% if (oneof_fields | rejectattr('message') | list) %}
            {% with field = (oneof_fields | rejectattr('message') | first) %}
            {{ field.name }}={{ field.mock_value }},
            {% endwith %}
            {% endif %}
            {% endfor %}
        )
        {% endif %}
        {% if method.client_streaming %}
        response = client.{{ method.safe_name|snake_case }}(iter(requests))
        {% else %}
        response = client.{{ method_name }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        request = {{ method.input.ident }}()
        {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
        {% if method_settings is not none %}
        {% for auto_populated_field in method_settings.auto_populated_fields %}
        request.{{ auto_populated_field }} = "{{ auto_populated_field_sample_value }}"
        {% endfor %}
        {% endif %}{# if method_settings is not none #}
        {% endwith %}{# method_settings #}
        assert args[0] == request
        {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% elif method.lro or (method.extended_lro and full_extended_lro) %}
    assert isinstance(response, future.Future)
    {% elif method.extended_lro and not full_extended_lro %}
    assert isinstance(response, {{ method.extended_lro.operation_type.ident }})
    {% elif method.server_streaming %}
    for message in response:
        assert isinstance(message, {{ method.output.ident }})
    {% else %}
    {% if "next_page_token" in method.output.fields.values()|map(attribute='name', default="") and not method.paged_result_field %}
    {# Cheeser assertion to force code coverage for bad paginated methods #}
    assert response.raw_page is response
    {% endif %}
    assert isinstance(response, {{ method.client_output.ident }})
    {% for field in method_output.fields.values() | rejectattr('message') %}
    {% if not field.oneof or field.proto3_optional %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    {% if field.repeated %}
    for index in range(len(response.{{ field.name }})):
        assert math.isclose(
            response.{{ field.name }}[index],
            {{ field.mock_value }}[index],
            rel_tol=1e-6,
        )
    {% else %}{# field.repeated #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% endif %}{# field.repeated #}
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endif %}{# end oneof/optional #}
    {% endfor %}
    {% endif %}
    {% endwith %}{# auto_populated_field_sample_value #}


{% if not method.client_streaming %}
def test_{{ method_name }}_empty_call():
    # This test is a coverage failsafe to make sure that totally empty calls,
    # i.e. request == None and no flattened fields passed, work.
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc',
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        call.return_value.name = "foo" # operation_request.operation in compute client(s) expect a string.
        client.{{ method_name }}()
        call.assert_called()
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
        {% if method_settings is not none %}
        {% for auto_populated_field in method_settings.auto_populated_fields %}
        # Ensure that the uuid4 field is set according to AIP 4235
        assert re.match(r"{{ uuid4_re }}", args[0].{{ auto_populated_field }})
        # clear UUID field so that the check below succeeds
        args[0].{{ auto_populated_field }} = None
        {% endfor %}
        {% endif %}{# if method_settings is not none #}
        {% endwith %}{# method_settings #}
        assert args[0] == {{ method.input.ident }}()
        {% endif %}


def test_{{ method_name }}_non_empty_request_with_auto_populated_field():
    # This test is a coverage failsafe to make sure that UUID4 fields are
    # automatically populated, according to AIP-4235, with non-empty requests.
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc',
    )

    # Populate all string fields in the request which are not UUID4
    # since we want to check that UUID4 are populated automatically
    # if they meet the requirements of AIP 4235.
    request = {{ method.input.ident }}(
    {% for field in method.input.fields.values() if field.ident|string() == "str" and not field.uuid4 %}
        {{ field.name }}={{ field.mock_value }},
    {% endfor %}
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        call.return_value.name = "foo" # operation_request.operation in compute client(s) expect a string.
        client.{{ method_name }}(request=request)
        call.assert_called()
        _, args, _ = call.mock_calls[0]
{% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
{% if method_settings is not none %}
{% for auto_populated_field in method_settings.auto_populated_fields %}
        # Ensure that the uuid4 field is set according to AIP 4235
        assert re.match(r"{{ uuid4_re }}", args[0].{{ auto_populated_field }})
        # clear UUID field so that the check below succeeds
        args[0].{{ auto_populated_field }} = None
{% endfor %}
{% endif %}{# if method_settings is not none #}
{% endwith %}{# method_settings #}
        assert args[0] == {{ method.input.ident }}(
        {% for field in method.input.fields.values() if field.ident|string() == "str" and not field.uuid4 %}
            {{ field.name }}={{ field.mock_value }},
        {% endfor %}
        )
{% endif %}

def test_{{ method_name }}_use_cached_wrapped_rpc():
    # Clients should use _prep_wrapped_messages to create cached wrapped rpcs,
    # instead of constructing them on each call
    with mock.patch("google.api_core.gapic_v1.method.wrap_method") as wrapper_fn:
        client = {{ service.client_name }}(
            credentials=ga_credentials.AnonymousCredentials(),
            transport="grpc",
        )

        # Should wrap all calls on client creation
        assert wrapper_fn.call_count > 0
        wrapper_fn.reset_mock()

        # Ensure method has been cached
        assert client._transport.{{method.transport_safe_name|snake_case}} in client._transport._wrapped_methods

        # Replace cached wrapped function with mock
        mock_rpc = mock.Mock()
        mock_rpc.return_value.name = "foo" # operation_request.operation in compute client(s) expect a string.
        client._transport._wrapped_methods[client._transport.{{method.transport_safe_name|snake_case}}] = mock_rpc
        {% if method.client_streaming %}
        request = [{}]
        client.{{ method.safe_name|snake_case }}(request)
        {% else %}
        request = {}
        client.{{ method_name }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert mock_rpc.call_count == 1

        {% if method.lro or method.extended_lro %}
        # Operation methods build a cached wrapper on first rpc call
        # subsequent calls should use the cached wrapper
        wrapper_fn.reset_mock()
        {% endif %}

        {% if method.client_streaming %}
        client.{{ method.safe_name|snake_case }}(request)
        {% else %}
        client.{{ method_name }}(request)
        {% endif %}


        # Establish that a new wrapper was not created for this call
        assert wrapper_fn.call_count == 0
        assert mock_rpc.call_count == 2

{% if not full_extended_lro %}
{% if not method.client_streaming %}
@pytest.mark.asyncio
async def test_{{ method_name }}_empty_call_async():
    # This test is a coverage failsafe to make sure that totally empty calls,
    # i.e. request == None and no flattened fields passed, work.
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='grpc_asyncio',
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            operations_pb2.Operation(name='operations/spam')
        )
        {% elif not method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% elif method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.StreamStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ '' }}
            {%- if not method.client_streaming and not method.server_streaming -%}
                grpc_helpers_async.FakeUnaryUnaryCall
            {%- else -%}
                grpc_helpers_async.FakeStreamUnaryCall
            {%- endif -%}({{ method.output.ident }}(
            {% for field in method.output.fields.values() | rejectattr('message') %}{% if not field.oneof or field.proto3_optional %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}
            {% endfor %}
        ))
        {% endif %}
        response = await client.{{ method_name }}()
        call.assert_called()
        _, args, _ = call.mock_calls[0]
        {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
        {% if method_settings is not none %}
        {% for auto_populated_field in method_settings.auto_populated_fields %}
        # Ensure that the uuid4 field is set according to AIP 4235
        assert re.match(r"{{ uuid4_re }}", args[0].{{ auto_populated_field }})
        # clear UUID field so that the check below succeeds
        args[0].{{ auto_populated_field }} = None
        {% endfor %}
        {% endif %}{# if method_settings is not none #}
        {% endwith %}{# method_settings #}
        assert args[0] == {{ method.input.ident }}()
{% endif %}

@pytest.mark.asyncio
async def test_{{ method_name }}_async_use_cached_wrapped_rpc(transport: str = "grpc_asyncio"):
    # Clients should use _prep_wrapped_messages to create cached wrapped rpcs,
    # instead of constructing them on each call
    with mock.patch("google.api_core.gapic_v1.method_async.wrap_method") as wrapper_fn:
        client = {{ service.async_client_name }}(
            credentials=ga_credentials.AnonymousCredentials(),
            transport=transport,
        )

        # Should wrap all calls on client creation
        assert wrapper_fn.call_count > 0
        wrapper_fn.reset_mock()

        # Ensure method has been cached
        assert client._client._transport.{{method.transport_safe_name|snake_case}} in client._client._transport._wrapped_methods

        # Replace cached wrapped function with mock
        class AwaitableMock(mock.AsyncMock):
            def __await__(self):
                self.await_count += 1
                return iter([])
        mock_object = AwaitableMock()
        client._client._transport._wrapped_methods[client._client._transport.{{method.transport_safe_name|snake_case}}] = mock_object

        {% if method.client_streaming %}
        request = [{}]
        await client.{{ method.name|snake_case }}(request)
        {% else %}
        request = {}
        await client.{{ method_name }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert mock_object.call_count == 1

        {% if method.lro or method.extended_lro %}
        # Operation methods build a cached wrapper on first rpc call
        # subsequent calls should use the cached wrapper
        wrapper_fn.reset_mock()
        {% endif %}

        {% if method.client_streaming %}
        await client.{{ method.name|snake_case }}(request)
        {% else %}
        await client.{{ method_name }}(request)
        {% endif %}

        # Establish that a new wrapper was not created for this call
        assert wrapper_fn.call_count == 0
        assert mock_object.call_count == 2

@pytest.mark.asyncio
async def test_{{ method_name }}_async(transport: str = 'grpc_asyncio', request_type={{ method.input.ident }}):
    {% with auto_populated_field_sample_value = "explicit value for autopopulate-able field" %}
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Everything is optional in proto3 as far as the runtime is concerned,
    # and we are mocking out the actual API, so just send an empty request.
    request = request_type()
    {# Set UUID4 fields so that they are not automatically populated. #}
    {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
    {% if method_settings is not none %}
    {% for auto_populated_field in method_settings.auto_populated_fields %}
    if isinstance(request, dict):
        request['{{ auto_populated_field }}'] = "{{ auto_populated_field_sample_value }}"
    else:
        request.{{ auto_populated_field }} = "{{ auto_populated_field_sample_value }}"
    {% endfor %}
    {% endif %}{# if method_settings is not none #}
    {% endwith %}{# method_settings #}
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            operations_pb2.Operation(name='operations/spam')
        )
        {% elif not method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% elif method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.StreamStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% else %}
        call.return_value ={{ '' }}
            {%- if not method.client_streaming and not method.server_streaming -%}
                grpc_helpers_async.FakeUnaryUnaryCall
            {%- else -%}
                grpc_helpers_async.FakeStreamUnaryCall
            {%- endif -%}({{ method.output.ident }}(
            {% for field in method.output.fields.values() | rejectattr('message') %}{% if not field.oneof or field.proto3_optional %}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}
            {% endfor %}
        ))
        {% endif %}
        {% if method.client_streaming and method.server_streaming %}
        response = await client.{{ method.name|snake_case }}(iter(requests))
        {% elif method.client_streaming and not method.server_streaming %}
        response = await (await client.{{ method.name|snake_case }}(iter(requests)))
        {% else %}
        response = await client.{{ method_name }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        {% if method.client_streaming %}
        assert next(args[0]) == request
        {% else %}
        request = {{ method.input.ident }}()
        {% with method_settings = api.all_method_settings.get(method.meta.address.proto) %}
        {% if method_settings is not none %}
        {% for auto_populated_field in method_settings.auto_populated_fields %}
        request.{{ auto_populated_field }} = "{{ auto_populated_field_sample_value }}"
        {% endfor %}
        {% endif %}{# if method_settings is not none #}
        {% endwith %}{# method_settings #}
        assert args[0] == request
        {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% elif method.lro %}
    assert isinstance(response, future.Future)
    {% elif method.extended_lro and not full_extended_lro %}
    assert isinstance(response, {{ method.extended_lro.operation_type.ident }})
    {% elif method.server_streaming %}
    message = await response.read()
    assert isinstance(message, {{ method.output.ident }})
    {% else %}
    assert isinstance(response, {{ method.client_output_async.ident }})
    {% for field in method_output.fields.values() | rejectattr('message') %}
    {% if not field.oneof or field.proto3_optional %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    {% if field.repeated %}
    for index in range(len(response.{{ field.name }})):
        assert math.isclose(
            response.{{ field.name }}[index],
            {{ field.mock_value }}[index],
            rel_tol=1e-6,
        )
    {% else %}{# field.repeated #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% endif %}{# field.repeated #}
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endif %}{# oneof/optional #}
    {% endfor %}
    {% endif %}
    {% endwith %}{# auto_populated_field_sample_value #}


@pytest.mark.asyncio
async def test_{{ method_name }}_async_from_dict():
    await test_{{ method_name }}_async(request_type=dict)
{% endif %}{# full_extended_lro #}

{% if method.explicit_routing %}
def test_{{ method.name|snake_case }}_routing_parameters():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    {% for routing_param in method.routing_rule.routing_parameters %}
    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = {{ method.input.ident }}(**{{ routing_param.sample_request }})

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        client.{{ method.safe_name|snake_case }}(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    _, _, kw = call.mock_calls[0]
    # This test doesn't assert anything useful.
    assert kw['metadata']
    {% endfor %}
{% endif %}


{% if method.field_headers and not method.client_streaming and not method.explicit_routing %}
def test_{{ method_name }}_field_headers():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = {{ method.input.ident }}()

    {% for field_header in method.field_headers %}
    request.{{ field_header.disambiguated }} = {{ method.input.get_field(field_header.disambiguated).mock_value }}
    {% endfor %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        client.{{ method_name }}(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert (
        'x-goog-request-params',
        '{% for field_header in method.field_headers -%}
        {{ field_header.raw }}={{ method.input.get_field(field_header.disambiguated).mock_value|trim("'") }}
        {%- if not loop.last %}&{% endif %}
        {%- endfor -%}',
    ) in kw['metadata']


{% if not full_extended_lro %}
@pytest.mark.asyncio
async def test_{{ method_name }}_field_headers_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Any value that is part of the HTTP/1.1 URI should be sent as
    # a field header. Set these to a non-empty value.
    request = {{ method.input.ident }}()

    {% for field_header in method.field_headers %}
    request.{{ field_header.disambiguated }} = {{ method.input.get_field(field_header.disambiguated).mock_value }}
    {% endfor %}

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(operations_pb2.Operation(name='operations/op'))
        {% elif method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        call.return_value.read = mock.AsyncMock(side_effect=[{{ method.output.ident }}()])
        {% else %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall({{ method.output.ident }}())
        {% endif %}
        await client.{{ method_name }}(request)

        # Establish that the underlying gRPC stub method was called.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        assert args[0] == request

    # Establish that the field header was sent.
    _, _, kw = call.mock_calls[0]
    assert (
        'x-goog-request-params',
        '{% for field_header in method.field_headers -%}
        {{ field_header.raw }}={{ method.input.get_field(field_header.disambiguated).mock_value|trim("'") }}
        {%- if not loop.last %}&{% endif %}
        {%- endfor -%}',
    ) in kw['metadata']
{% endif %}
{% endif %}{# full_extended_lro #}

{% if method.ident.package != method.input.ident.package %}
def test_{{ method_name }}_from_dict_foreign():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )
    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        response = client.{{ method_name }}(request={
            {% for field in method.input.fields.values() %}
            '{{ field.name }}': {{ field.mock_value }},
            {% endfor %}
            }
        )
        call.assert_called()

{% endif %}

{% if method.flattened_fields and not method.client_streaming %}
def test_{{ method_name }}_flattened():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}
        # Call the method with a truthy value for each flattened field,
        # using the keyword arguments to the method.
        client.{{ method_name }}(
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(call.mock_calls) == 1
        _, args, _ = call.mock_calls[0]
        {% for key, field in method.flattened_fields.items() %}{% if not field.oneof or field.proto3_optional %}
        {% if field.ident|string() == 'timestamp_pb2.Timestamp' %}
        assert TimestampRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.ident|string() == 'duration_pb2.Duration' %}
        assert DurationRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif (field.ident|string()).startswith('wrappers_pb2.') %}
        assert wrappers.{{ (field.ident|string())[13:] }}Rule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.field_pb.type == 2 %}{# Use approx eq for floats #}
        assert math.isclose(args[0].{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
        {% else %}
        arg = args[0].{{ key }}
        mock_val = {{ field.mock_value }}
        {% if field.ident|string() == "struct_pb2.Value" %}
        from proto.marshal import Marshal
        from proto.marshal.rules.struct import ValueRule
        rule = ValueRule(marshal=Marshal(name="Test"))
        mock_val = rule.to_python(mock_val)
        {% endif %}{# struct_pb2.Value #}
        assert arg == mock_val
        {% endif %}
        {% endif %}{% endfor %}
        {% for oneofs in method.flattened_oneof_fields().values() %}
        {% with field = oneofs[-1]  %}
        assert args[0].{{ method.flattened_field_to_key[field.name] }} == {{ field.mock_value }}
        {% endwith %}
        {% endfor %}



def test_{{ method_name }}_flattened_error():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        client.{{ method_name }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )

{% if not full_extended_lro %}
@pytest.mark.asyncio
async def test_{{ method_name }}_flattened_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Designate an appropriate return value for the call.
        {% if method.void %}
        call.return_value = None
        {% elif method.lro %}
        call.return_value = operations_pb2.Operation(name='operations/op')
        {% elif method.server_streaming %}
        call.return_value = iter([{{ method.output.ident }}()])
        {% else %}
        call.return_value = {{ method.output.ident }}()
        {% endif %}


        {% if method.void %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(None)
        {% elif method.lro %}
        call.return_value = grpc_helpers_async.FakeUnaryUnaryCall(
            operations_pb2.Operation(name='operations/spam')
        )
        {% elif not method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.UnaryStreamCall, autospec=True)
        {% elif method.client_streaming and method.server_streaming %}
        call.return_value = mock.Mock(aio.StreamStreamCall, autospec=True)
        {% else %}
        call.return_value = {{ '' }}
            {%- if not method.client_streaming and not method.server_streaming -%}
                grpc_helpers_async.FakeUnaryUnaryCall
            {%- else -%}
                grpc_helpers_async.FakeStreamUnaryCall
            {%- endif -%}({{ method.output.ident }}())
        {% endif %}
        # Call the method with a truthy value for each flattened field,
        # using the keyword arguments to the method.
        response = await client.{{ method_name }}(
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(call.mock_calls)
        _, args, _ = call.mock_calls[0]
        {% for key, field in method.flattened_fields.items() %}{% if not field.oneof or field.proto3_optional %}
        {% if field.ident|string() == 'timestamp_pb2.Timestamp' %}
        assert TimestampRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.ident|string() == 'duration_pb2.Duration' %}
        assert DurationRule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif (field.ident|string()).startswith('wrappers_pb2.') %}
        assert wrappers.{{ (field.ident|string())[13:] }}Rule().to_proto(args[0].{{ key }}) == {{ field.mock_value }}
        {% elif field.field_pb.type == 2 %}{# Use approx eq for floats #}
        assert math.isclose(args[0].{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
        {% else %}
        arg = args[0].{{ key }}
        mock_val = {{ field.mock_value }}
        {% if field.ident|string() == "struct_pb2.Value" %}
        from proto.marshal import Marshal
        from proto.marshal.rules.struct import ValueRule
        rule = ValueRule(marshal=Marshal(name="Test"))
        mock_val = rule.to_python(mock_val)
        {% endif %}{# struct_pb2.Value #}
        assert arg == mock_val
        {% endif %}
        {% endif %}{% endfor %}
        {% for oneofs in method.flattened_oneof_fields().values() %}
        {% with field = oneofs[-1]  %}
        assert args[0].{{ method.flattened_field_to_key[field.name] }} == {{ field.mock_value }}
        {% endwith %}
        {% endfor %}

@pytest.mark.asyncio
async def test_{{ method_name }}_flattened_error_async():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        await client.{{ method_name }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )
{% endif %}
{% endif %}{# full_extended_lro #}


{% if method.paged_result_field %}
{% if not method.paged_result_field.map %}
def test_{{ method_name }}_pager(transport_name: str = "grpc"):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport_name,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Set the response to a series of pages.
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )

        metadata = ()
        {% if not method.explicit_routing and method.field_headers %}
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                {% for field_header in method.field_headers %}
                {% if not method.client_streaming %}
                ('{{ field_header.raw }}', ''),
                {% endif %}
                {% endfor %}
            )),
        )
        {% endif %}
        pager = client.{{ method_name }}(request={})

        assert pager._metadata == metadata

        results = list(pager)
        assert len(results) == 6
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                   for i in results)
{% endif %}
def test_{{ method_name }}_pages(transport_name: str = "grpc"):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport_name,
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__') as call:
        # Set the response to a series of pages.
        {% if method.paged_result_field.map %}
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'a':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'b':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'c':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={},
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'g':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'h':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'i':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
            ),
            RuntimeError,
        )
        {% else %}
        call.side_effect = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        )
        {% endif %}
        {# method.paged_result_field.map #}
        pages = list(client.{{ method_name }}(request={}).pages)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token

@pytest.mark.asyncio
async def test_{{ method_name }}_async_pager():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__', new_callable=mock.AsyncMock) as call:
        # Set the response to a series of pages.
        call.side_effect = (
        {% if method.paged_result_field.map %}
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'a':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'b':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'c':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
                  next_page_token='abc',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={},
                  next_page_token='def',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'g':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
                  next_page_token='ghi',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'h':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'i':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
              ),
            RuntimeError,
        {% else %}
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        {% endif %}
        )
        async_pager = await client.{{ method_name }}(request={},)
        assert async_pager.next_page_token == 'abc'
        responses = []
        async for response in async_pager: # pragma: no branch
            responses.append(response)

        assert len(responses) == 6
        {% if method.paged_result_field.map %}

        assert all(
            isinstance(i, tuple)
                for i in responses)
        for result in responses:
            assert isinstance(result, tuple)
            assert tuple(type(t) for t in result) == (str, {{ method.paged_result_field.type.fields.get('value').ident }})

        assert async_pager.get('a') is None
        assert isinstance(async_pager.get('h'), {{ method.paged_result_field.type.fields.get('value').ident }})
        {% else %}
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                for i in responses)
        {% endif %}


@pytest.mark.asyncio
async def test_{{ method_name }}_async_pages():
    client = {{ service.async_client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
    )

    # Mock the actual call within the gRPC stub, and fake the request.
    with mock.patch.object(
            type(client.transport.{{ method.transport_safe_name|snake_case }}),
            '__call__', new_callable=mock.AsyncMock) as call:
        # Set the response to a series of pages.
        call.side_effect = (
        {% if method.paged_result_field.map %}
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'a':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'b':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'c':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
                  next_page_token='abc',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={},
                  next_page_token='def',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'g':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
                  next_page_token='ghi',
              ),
              {{ method.output.ident }}(
                  {{ method.paged_result_field.name }}={
                      'h':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                      'i':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                  },
              ),
            RuntimeError,
        {% else %}
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
            RuntimeError,
        {% endif %}
        )
        pages = []
        # Workaround issue in python 3.9 related to code coverage by adding `# pragma: no branch`
        # See https://github.com/googleapis/gapic-generator-python/pull/1174#issuecomment-1025132372
        async for page_ in ( # pragma: no branch
            await client.{{ method_name }}(request={})
        ).pages:
            pages.append(page_)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token
{% elif method.lro and "next_page_token" in method.lro.response_type.fields.keys() %}
def test_{{ method_name }}_raw_page_lro():
    response = {{ method.lro.response_type.ident }}()
    assert response.raw_page is response
{% endif %}{# method.paged_result_field #}{% endwith %}
{% endwith %}{# uuid4_re #}
{% endmacro %}

{% macro rest_required_tests(method, service, numeric_enums=False, full_extended_lro=False) %}
{% with method_name = method.safe_name|snake_case + "_unary" if method.extended_lro and not full_extended_lro else method.name|snake_case, method_output = method.extended_lro.operation_type if method.extended_lro and not full_extended_lro else method.output %}{% if method.http_options %}
{# TODO(kbandes): remove this if condition when lro and client streaming are supported. #}
{% if not method.client_streaming %}
@pytest.mark.parametrize("request_type", [
    {{ method.input.ident }},
    dict,
])
def test_{{ method_name }}_rest(request_type):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport="rest",
    )

    # send a request that will satisfy transcoding
    request_init = {{ method.http_options[0].sample_request(method) }}
    {% for field in method.body_fields.values() %}
    {% if not field.oneof or field.proto3_optional %}
    {# ignore oneof fields that might conflict with sample_request #}
    request_init["{{ field.name }}"] = {{ field.merged_mock_value(method.http_options[0].sample_request(method).get(field.name)) }}
    # The version of a generated dependency at test runtime may differ from the version used during generation.
    # Delete any fields which are not present in the current runtime dependency
    # See https://github.com/googleapis/gapic-generator-python/issues/1748

    # Determine if the message type is proto-plus or protobuf
    test_field = {{ method.input.ident }}.meta.fields["{{ field.name }}"]

    def get_message_fields(field):
        # Given a field which is a message (composite type), return a list with
        # all the fields of the message.
        # If the field is not a composite type, return an empty list.
        message_fields = []

        if hasattr(field, "message") and field.message:
            is_field_type_proto_plus_type = not hasattr(field.message, "DESCRIPTOR")

            if is_field_type_proto_plus_type:
                message_fields = field.message.meta.fields.values()
            # Add `# pragma: NO COVER` because there may not be any `*_pb2` field types
            else: # pragma: NO COVER
                message_fields = field.message.DESCRIPTOR.fields
        return message_fields

    runtime_nested_fields = [
        (field.name, nested_field.name)
        for field in get_message_fields(test_field)
        for nested_field in get_message_fields(field)
    ]

    subfields_not_in_runtime = []

    # For each item in the sample request, create a list of sub fields which are not present at runtime
    # Add `# pragma: NO COVER` because this test code will not run if all subfields are present at runtime
    for field, value in request_init["{{ field.name }}"].items(): # pragma: NO COVER
        result = None
        is_repeated = False
        # For repeated fields
        if isinstance(value, list) and len(value):
            is_repeated = True
            result = value[0]
        # For fields where the type is another message
        if isinstance(value, dict):
            result = value

        if result and hasattr(result, "keys"):
            for subfield in result.keys():
                if (field, subfield) not in runtime_nested_fields:
                    subfields_not_in_runtime.append(
                        {"field": field, "subfield": subfield, "is_repeated": is_repeated}
                    )

    # Remove fields from the sample request which are not present in the runtime version of the dependency
    # Add `# pragma: NO COVER` because this test code will not run if all subfields are present at runtime
    for subfield_to_delete in subfields_not_in_runtime: # pragma: NO COVER
        field = subfield_to_delete.get("field")
        field_repeated = subfield_to_delete.get("is_repeated")
        subfield = subfield_to_delete.get("subfield")
        if subfield:
            if field_repeated:
                for i in range(0, len(request_init["{{ field.name }}"][field])):
                    del request_init["{{ field.name }}"][field][i][subfield]
            else:
                del request_init["{{ field.name }}"][field][subfield]
    {% endif %}
    {% endfor %}
    request = request_type(**request_init)
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(type(client.transport._session), 'request') as req:
        # Designate an appropriate value for the returned response.
        {% if method.void %}
        return_value = None
        {% elif method.lro %}
        return_value = operations_pb2.Operation(name='operations/spam')
        {% elif method.extended_lro %}
        return_value = {{ method.extended_lro.operation_type.ident }}(
            {% for field in method.extended_lro.operation_type.fields.values() | rejectattr('message')%}
            {% if not field.oneof or field.proto3_optional %}
              {{ field.name }}={{ field.mock_value }},
            {% endif %}{% endfor %}
            {# This is a hack to only pick one field #}
            {% for oneof_fields in method.output.oneof_fields().values() %}
            {% if (oneof_fields | rejectattr('message') | list) %}
            {% with field = (oneof_fields | rejectattr('message') | first) %}
            {{ field.name }}={{ field.mock_value }},
            {% endwith %}
            {% endif %}
            {% endfor %}
        )
        {% else %}
        return_value = {{ method.output.ident }}(
            {% for field in method.output.fields.values() | rejectattr('message')%}
            {% if not field.oneof or field.proto3_optional %}
              {{ field.name }}={{ field.mock_value }},
              {% endif %}{% endfor %}
            {# This is a hack to only pick one field #}
            {% for oneof_fields in method.output.oneof_fields().values() %}
            {% if (oneof_fields | rejectattr('message') | list) %}
            {% with field = (oneof_fields | rejectattr('message') | first) %}
            {{ field.name }}={{ field.mock_value }},
            {% endwith %}
            {% endif %}
            {% endfor %}
        )
        {% endif %}

        # Wrap the value into a proper Response obj
        response_value = Response()
        response_value.status_code = 200
        {% if method.void %}
        json_return_value = ''
        {% elif method.lro %}
        json_return_value = json_format.MessageToJson(return_value)
        {% else %}
        {% if method.output.ident.is_proto_plus_type %}
        # Convert return value to protobuf type
        return_value = {{ method.output.ident }}.pb(return_value)
        {% endif %}
        json_return_value = json_format.MessageToJson(return_value)
        {% endif %}

        {% if method.server_streaming %}
        json_return_value = "[{}]".format(json_return_value)
        {% endif %}

        response_value._content = json_return_value.encode('UTF-8')
        req.return_value = response_value
        {% if method.client_streaming %}
        response = client.{{ method_name }}(iter(requests))
        {% elif method.server_streaming %}
        with mock.patch.object(response_value, 'iter_content') as iter_content:
            iter_content.return_value = iter(json_return_value)
            response = client.{{ method_name }}(request)
        {% else %}
        response = client.{{ method_name }}(request)
        {% endif %}

    {% if "next_page_token" in method_output.fields.values()|map(attribute='name', default="") and not method.paged_result_field %}
    {# Cheeser assertion to force code coverage for bad paginated methods #}
    assert response.raw_page is response

    {% endif %}

    {% if method.server_streaming %}
    assert isinstance(response, Iterable)
    response = next(response)
    {% endif %}

    # Establish that the response is the type that we expect.
    {% if method.void %}
    assert response is None
    {% elif method.lro %}
    assert response.operation.name == "operations/spam"
    {% elif method.extended_lro and not full_extended_lro %}
    assert isinstance(response, {{ method.extended_lro.operation_type.ident }})
    {% else %}
    assert isinstance(response, {{ method.client_output.ident }})
    {% for field in method_output.fields.values() | rejectattr('message') %}
    {% if not field.oneof or field.proto3_optional %}
    {% if field.field_pb.type in [1, 2] %}{# Use approx eq for floats #}
    {% if field.repeated %}
    for index in range(len(response.{{ field.name }})):
        assert math.isclose(
            response.{{ field.name }}[index],
            {{ field.mock_value }}[index],
            rel_tol=1e-6,
        )
    {% else %}{# field.repeated #}
    assert math.isclose(response.{{ field.name }}, {{ field.mock_value }}, rel_tol=1e-6)
    {% endif %}{# field.repeated #}
    {% elif field.field_pb.type == 8 %}{# Use 'is' for bools #}
    assert response.{{ field.name }} is {{ field.mock_value }}
    {% else %}
    assert response.{{ field.name }} == {{ field.mock_value }}
    {% endif %}
    {% endif %}{# end oneof/optional #}
    {% endfor %}
    {% endif %}

def test_{{ method_name }}_rest_use_cached_wrapped_rpc():
    # Clients should use _prep_wrapped_messages to create cached wrapped rpcs,
    # instead of constructing them on each call
    with mock.patch("google.api_core.gapic_v1.method.wrap_method") as wrapper_fn:
        client = {{ service.client_name }}(
            credentials=ga_credentials.AnonymousCredentials(),
            transport="rest",
        )

        # Should wrap all calls on client creation
        assert wrapper_fn.call_count > 0
        wrapper_fn.reset_mock()

        # Ensure method has been cached
        assert client._transport.{{method.transport_safe_name|snake_case}} in client._transport._wrapped_methods

        # Replace cached wrapped function with mock
        mock_rpc = mock.Mock()
        mock_rpc.return_value.name = "foo" # operation_request.operation in compute client(s) expect a string.
        client._transport._wrapped_methods[client._transport.{{method.transport_safe_name|snake_case}}] = mock_rpc

        {% if method.client_streaming %}
        request = [{}]
        client.{{ method.safe_name|snake_case }}(request)
        {% else %}
        request = {}
        client.{{ method_name }}(request)
        {% endif %}

        # Establish that the underlying gRPC stub method was called.
        assert mock_rpc.call_count == 1

        {% if method.lro or method.extended_lro %}
        # Operation methods build a cached wrapper on first rpc call
        # subsequent calls should use the cached wrapper
        wrapper_fn.reset_mock()
        {% endif %}

        {% if method.client_streaming %}
        client.{{ method.safe_name|snake_case }}(request)
        {% else %}
        client.{{ method_name }}(request)
        {% endif %}

        # Establish that a new wrapper was not created for this call
        assert wrapper_fn.call_count == 0
        assert mock_rpc.call_count == 2


    {% if method.input.required_fields %}
def test_{{ method_name }}_rest_required_fields(request_type={{ method.input.ident }}):
    transport_class = transports.{{ service.rest_transport_name }}

    request_init = {}
    {% for req_field in method.input.required_fields if req_field.is_primitive %}
    {% if req_field.field_pb.type == 9 %}
    request_init["{{ req_field.name }}"] = "{{ req_field.field_pb.default_value }}"
    {% else %}
    request_init["{{ req_field.name }}"] = {{ req_field.type.python_type(req_field.field_pb.default_value or 0) }}
    {% endif %}{# default is str #}
    {% endfor %}
    request = request_type(**request_init)
    {% if method.input.ident.is_proto_plus_type %}
    pb_request = request_type.pb(request)
    {% else %}
    pb_request = request
    {% endif %}
    jsonified_request = json.loads(json_format.MessageToJson(
        pb_request,
        use_integers_for_enums=False
    ))

    # verify fields with default values are dropped
    {% for req_field in method.input.required_fields if req_field.is_primitive and req_field.name in method.query_params %}
    {% set field_name = req_field.name | camel_case %}
    assert "{{ field_name }}" not in jsonified_request
    {% endfor %}

    unset_fields = transport_class(credentials=ga_credentials.AnonymousCredentials()).{{ method.transport_safe_name | snake_case }}._get_unset_required_fields(jsonified_request)
    jsonified_request.update(unset_fields)

    # verify required fields with default values are now present
    {% for req_field in method.input.required_fields if req_field.is_primitive and req_field.name in method.query_params %}
    {% set field_name = req_field.name | camel_case %}
    assert "{{ field_name }}" in jsonified_request
    assert jsonified_request["{{ field_name }}"] == request_init["{{ req_field.name }}"]
    {% endfor %}

    {% for req_field in method.input.required_fields if req_field.is_primitive %}
    {% set field_name = req_field.name | camel_case %}
    {% set mock_value = req_field.primitive_mock_as_str() %}
    jsonified_request["{{ field_name }}"] = {{ mock_value }}
    {% endfor %}

    unset_fields = transport_class(credentials=ga_credentials.AnonymousCredentials()).{{ method.transport_safe_name | snake_case }}._get_unset_required_fields(jsonified_request)
    {% if method.query_params %}
    # Check that path parameters and body parameters are not mixing in.
    assert not set(unset_fields) - set(({% for param in method.query_params|sort %}"{{param}}", {% endfor %}))
    {% endif %}
    jsonified_request.update(unset_fields)

    # verify required fields with non-default values are left alone
    {% for req_field in method.input.required_fields if req_field.is_primitive %}
    {% set field_name = req_field.name | camel_case %}
    {% set mock_value = req_field.primitive_mock_as_str() %}
    assert "{{ field_name }}" in jsonified_request
    assert jsonified_request["{{ field_name }}"] == {{ mock_value }}
    {% endfor %}


    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='rest',
    )
    request = request_type(**request_init)

    # Designate an appropriate value for the returned response.
    {% if method.void %}
    return_value = None
    {% elif method.lro %}
    return_value = operations_pb2.Operation(name='operations/spam')
    {% else %}
    return_value = {{ method.output.ident }}()
    {% endif %}
    # Mock the http request call within the method and fake a response.
    with mock.patch.object(Session, 'request') as req:
        # We need to mock transcode() because providing default values
        # for required fields will fail the real version if the http_options
        # expect actual values for those fields.
        with mock.patch.object(path_template, 'transcode') as transcode:
            # A uri without fields and an empty body will force all the
            # request fields to show up in the query_params.
            {% if method.input.ident.is_proto_plus_type %}
            pb_request = request_type.pb(request)
            {% else %}
            pb_request = request
            {% endif %}
            transcode_result = {
                'uri': 'v1/sample_method',
                'method': "{{ method.http_options[0].method }}",
                'query_params': pb_request,
            }
            {% if method.http_options[0].body %}
            transcode_result['body'] = pb_request
            {% endif %}
            transcode.return_value = transcode_result

            response_value = Response()
            response_value.status_code = 200
            {% if method.void %}
            json_return_value = ''
            {% elif method.lro %}
            json_return_value = json_format.MessageToJson(return_value)
            {% else %}

            {% if method.output.ident.is_proto_plus_type %}
            # Convert return value to protobuf type
            return_value = {{ method.output.ident }}.pb(return_value)
            {% endif %}
            json_return_value = json_format.MessageToJson(return_value)
            {% endif %}
            {% if method.server_streaming %}
            json_return_value = "[{}]".format(json_return_value)
            {% endif %}

            response_value._content = json_return_value.encode('UTF-8')
            req.return_value = response_value

            {% if method.client_streaming %}
            response = client.{{ method_name }}(iter(requests))
            {% elif method.server_streaming %}
            with mock.patch.object(response_value, 'iter_content') as iter_content:
                iter_content.return_value = iter(json_return_value)
                response = client.{{ method_name }}(request)
            {% else %}
            response = client.{{ method_name }}(request)
            {% endif %}

            expected_params = [
            {% for req_field in method.input.required_fields if req_field.is_primitive and req_field.name in method.query_params %}
                (
                    "{{ req_field.name | camel_case }}",
                    {% if req_field.field_pb.type == 9 %}
                    "{{ req_field.field_pb.default_value }}",
                    {% elif req_field.field_pb.type == 8 %}
                    str({{ req_field.type.python_type(req_field.field_pb.default_value or 0) }}).lower(),
                    {% else %}
                    str({{ req_field.type.python_type(req_field.field_pb.default_value or 0) }}),
                    {% endif %}{# default is str #}
                ),
              {% endfor %}
              {% if numeric_enums %}
                ('$alt', 'json;enum-encoding=int')
              {% endif %}
            ]
            actual_params = req.call_args.kwargs['params']
            assert expected_params == actual_params


def test_{{ method_name }}_rest_unset_required_fields():
    transport = transports.{{ service.rest_transport_name }}(credentials=ga_credentials.AnonymousCredentials)

    unset_fields = transport.{{ method.transport_safe_name|snake_case }}._get_unset_required_fields({})
    assert set(unset_fields) == (set(({% for param in method.query_params|sort %}"{{ param|camel_case }}", {% endfor %})) & set(({% for param in method.input.required_fields %}"{{ param.name|camel_case }}", {% endfor %})))

    {% endif %}{# required_fields #}


{% if not method.client_streaming %}
@pytest.mark.parametrize("null_interceptor", [True, False])
def test_{{ method_name }}_rest_interceptors(null_interceptor):
    transport = transports.{{ service.name }}RestTransport(
        credentials=ga_credentials.AnonymousCredentials(),
        interceptor=None if null_interceptor else transports.{{ service.name}}RestInterceptor(),
        )
    client = {{ service.client_name }}(transport=transport)
    with mock.patch.object(type(client.transport._session), "request") as req, \
         mock.patch.object(path_template, "transcode")  as transcode, \
         {% if method.lro %}
         mock.patch.object(operation.Operation, "_set_result_from_operation"), \
         {% endif %}
         {% if not method.void %}
         mock.patch.object(transports.{{ service.name }}RestInterceptor, "post_{{method.name|snake_case}}") as post, \
         {% endif %}
         mock.patch.object(transports.{{ service.name }}RestInterceptor, "pre_{{ method.name|snake_case }}") as pre:
        pre.assert_not_called()
        {% if not method.void %}
        post.assert_not_called()
        {% endif %}
        {% if method.input.ident.is_proto_plus_type %}
        pb_message = {{ method.input.ident }}.pb({{ method.input.ident }}())
        {% else %}
        pb_message = {{ method.input.ident }}()
        {% endif %}
        transcode.return_value = {
            "method": "post",
            "uri": "my_uri",
            "body": pb_message,
            "query_params": pb_message,
        }

        req.return_value = Response()
        req.return_value.status_code = 200
        req.return_value.request = PreparedRequest()
        {% if not method.void %}
        req.return_value._content = {% if method.output.ident.is_proto_plus_type %}{{ method.output.ident }}.to_json({{ method.output.ident }}()){% else %}json_format.MessageToJson({{ method.output.ident }}()){% endif %}

        {% if method.server_streaming %}
        req.return_value._content = "[{}]".format(req.return_value._content)
        {% endif %}

        {% endif %}

        request = {{ method.input.ident }}()
        metadata =[
            ("key", "val"),
            ("cephalopod", "squid"),
        ]
        pre.return_value = request, metadata
        {% if not method.void %}
        post.return_value = {{ method.output.ident }}()
        {% endif %}

        client.{{ method_name }}(request, metadata=[("key", "val"), ("cephalopod", "squid"),])

        pre.assert_called_once()
        {% if not method.void %}
        post.assert_called_once()
        {% endif %}

{% endif %}{# streaming #}


def test_{{ method_name }}_rest_bad_request(transport: str = 'rest', request_type={{ method.input.ident }}):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # send a request that will satisfy transcoding
    request_init = {{ method.http_options[0].sample_request(method) }}
    request = request_type(**request_init)
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}

    # Mock the http request call within the method and fake a BadRequest error.
    with mock.patch.object(Session, 'request') as req, pytest.raises(core_exceptions.BadRequest):
        # Wrap the value into a proper Response obj
        response_value = Response()
        response_value.status_code = 400
        response_value.request = Request()
        req.return_value = response_value
        {% if method.client_streaming %}
        client.{{ method_name }}(iter(requests))
        {% else %}
        client.{{ method_name }}(request)
        {% endif %}


{% if method.flattened_fields and not method.client_streaming %}
def test_{{ method_name }}_rest_flattened():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport="rest",
    )

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(type(client.transport._session), 'request') as req:
        # Designate an appropriate value for the returned response.
        {% if method.void %}
        return_value = None
        {% elif method.lro %}
        return_value = operations_pb2.Operation(name='operations/spam')
        {% else %}
        return_value = {{ method.output.ident }}()
        {% endif %}

        # get arguments that satisfy an http rule for this method
        sample_request = {{ method.http_options[0].sample_request(method) }}

        # get truthy value for each flattened field
        mock_args = dict(
            {% for field in method.flattened_fields.values() %}
            {% if not field.oneof or field.proto3_optional %}
            {# ignore oneof fields that might conflict with sample_request #}
            {{ field.name }}={{ field.mock_value }},
            {% endif %}
            {% endfor %}
        )
        mock_args.update(sample_request)

        # Wrap the value into a proper Response obj
        response_value = Response()
        response_value.status_code = 200
        {% if method.void %}
        json_return_value = ''
        {% elif method.lro %}
        json_return_value = json_format.MessageToJson(return_value)
        {% else %}
        {% if method.output.ident.is_proto_plus_type %}
        # Convert return value to protobuf type
        return_value = {{ method.output.ident }}.pb(return_value)
        {% endif %}
        json_return_value = json_format.MessageToJson(return_value)
        {% endif %}
        {% if method.server_streaming %}
        json_return_value = "[{}]".format(json_return_value)
        {% endif %}
        response_value._content = json_return_value.encode('UTF-8')
        req.return_value = response_value

        {% if method.server_streaming %}
        with mock.patch.object(response_value, 'iter_content') as iter_content:
            iter_content.return_value = iter(json_return_value)
            client.{{ method_name }}(**mock_args)
        {% else %}
        client.{{ method_name }}(**mock_args)
        {% endif %}

        # Establish that the underlying call was made with the expected
        # request object values.
        assert len(req.mock_calls) == 1
        _, args, _ = req.mock_calls[0]
        {% with uri = method.http_options[0].uri %}
        assert path_template.validate("%s{{ uri }}" % client.transport._host, args[1])
        {% endwith %}
        {# TODO(kbandes) - reverse-transcode request args to check all request fields #}


def test_{{ method_name }}_rest_flattened_error(transport: str = 'rest'):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Attempting to call a method with both a request object and flattened
    # fields is an error.
    with pytest.raises(ValueError):
        client.{{ method_name }}(
            {{ method.input.ident }}(),
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}={{ field.mock_value }},
            {% endfor %}
        )
{% endif %}{# flattened fields #}


{% if method.paged_result_field %}
def test_{{ method_name }}_rest_pager(transport: str = 'rest'):
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport=transport,
    )

    # Mock the http request call within the method and fake a response.
    with mock.patch.object(Session, 'request') as req:
        # TODO(kbandes): remove this mock unless there's a good reason for it.
        #with mock.patch.object(path_template, 'transcode') as transcode:
        # Set the response as a series of pages
        {% if method.paged_result_field.map%}
        response = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'a':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'b':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'c':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={},
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'g':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}={
                    'h':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                    'i':{{ method.paged_result_field.type.fields.get('value').ident }}(),
                },
            ),
        )
        {% else %}
        response = (
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='abc',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[],
                next_page_token='def',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                ],
                next_page_token='ghi',
            ),
            {{ method.output.ident }}(
                {{ method.paged_result_field.name }}=[
                    {{ method.paged_result_field.type.ident }}(),
                    {{ method.paged_result_field.type.ident }}(),
                ],
            ),
        )
        {% endif %}
        # Two responses for two calls
        response = response + response

        # Wrap the values into proper Response objs
        response = tuple({{ method.output.ident }}.to_json(x) for x in response)
        return_values = tuple(Response() for i in response)
        for return_val, response_val in zip(return_values, response):
            {% if method.server_streaming %}
            response_val = "[{}]".format(response_val)
            {% endif %}
            return_val._content = response_val.encode('UTF-8')
            return_val.status_code = 200
        req.side_effect = return_values

        sample_request = {{ method.http_options[0].sample_request(method) }}
        {% for field in method.body_fields.values() %}
        {% if not field.oneof or field.proto3_optional %}
        {# ignore oneof fields that might conflict with sample_request #}
        sample_request["{{ field.name }}"] = {{ field.mock_value }}
        {% endif %}
        {% endfor %}


        pager = client.{{ method_name }}(request=sample_request)

        {% if method.paged_result_field.map %}
        assert isinstance(pager.get('a'), {{ method.paged_result_field.type.fields.get('value').ident }})
        assert pager.get('h') is None
        {% endif %}

        results = list(pager)
        assert len(results) == 6
        {% if method.paged_result_field.map %}
        assert all(
            isinstance(i, tuple)
                for i in results)
        for result in results:
            assert isinstance(result, tuple)
            assert tuple(type(t) for t in result) == (str, {{ method.paged_result_field.type.fields.get('value').ident }})

        assert pager.get('a') is None
        assert isinstance(pager.get('h'), {{ method.paged_result_field.type.fields.get('value').ident }})
        {% else %}
        assert all(isinstance(i, {{ method.paged_result_field.type.ident }})
                for i in results)
        {% endif %}

        pages = list(client.{{ method_name }}(request=sample_request).pages)
        for page_, token in zip(pages, ['abc','def','ghi', '']):
            assert page_.raw_page.next_page_token == token


{%- else %}{# paged_result_field #}

def test_{{ method_name }}_rest_error():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport='rest'
    )
    {%- if not method.http_options %}
    # Since a `google.api.http` annotation is required for using a rest transport
    # method, this should error.
    with pytest.raises(NotImplementedError) as not_implemented_error:
        client.{{ method_name }}({})
    assert (
        "Method {{ method.name }} is not available over REST transport"
        in str(not_implemented_error.value)
    )

    {%- endif %}{# not method.http_options #}
{% endif %}{# flattened_fields #}

{% else %}{# this is an lro or streaming method #}
def test_{{ method_name }}_rest_unimplemented():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport="rest",
    )
    request = {{ method.input.ident }}()
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}
    with pytest.raises(NotImplementedError):
        client.{{ method_name }}({% if method.client_streaming %}requests{% else %}request{% endif %})

{% endif %}{# not lro and not streaming #}{% else %}{# not method.http_options #}
def test_{{ method_name }}_rest_no_http_options():
    client = {{ service.client_name }}(
        credentials=ga_credentials.AnonymousCredentials(),
        transport="rest",
    )
    request = {{ method.input.ident }}()
    {% if method.client_streaming %}
    requests = [request]
    {% endif %}
    with pytest.raises(RuntimeError):
        client.{{ method_name }}({% if method.client_streaming %}requests{% else %}request{% endif %})


{% endif %}{# not method.http_options #}
{% endwith %}{# method_name #}
{% endmacro %}
