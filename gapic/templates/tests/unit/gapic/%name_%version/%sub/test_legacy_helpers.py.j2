{% extends "_base.py.j2" %}

{% block content %}


import os

# try/except added for compatibility with python < 3.8
try:
    from unittest import mock
except ImportError:  # pragma: NO COVER
    import mock


from {% if api.naming.module_namespace %}{{ api.naming.module_namespace|join('.') }}.{% endif %}
    {{- api.naming.versioned_module_name }}._compat import legacy_helpers


def test__read_environment_variables():
    assert legacy_helpers._read_environment_variables() == (False, "auto", None)
    
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": "true"}):
        assert legacy_helpers._read_environment_variables() == (True, "auto", None)
    
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": "false"}):
        assert legacy_helpers._read_environment_variables() == (False, "auto", None)
    
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_CLIENT_CERTIFICATE": "Unsupported"}):
        with pytest.raises(ValueError) as excinfo:
            legacy_helpers._read_environment_variables()
    assert str(excinfo.value) == "Environment variable `GOOGLE_API_USE_CLIENT_CERTIFICATE` must be either `true` or `false`"

    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "never"}):
        assert legacy_helpers._read_environment_variables() == (False, "never", None)
    
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "always"}):
        assert legacy_helpers._read_environment_variables() == (False, "always", None)
    
    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "auto"}):
        assert legacy_helpers._read_environment_variables() == (False, "auto", None)

    with mock.patch.dict(os.environ, {"GOOGLE_API_USE_MTLS_ENDPOINT": "Unsupported"}):
        with pytest.raises(MutualTLSChannelError) as excinfo:
            legacy_helpers._read_environment_variables()
    assert str(excinfo.value) == "Environment variable `GOOGLE_API_USE_MTLS_ENDPOINT` must be `never`, `auto` or `always`"

    with mock.patch.dict(os.environ, {"GOOGLE_CLOUD_UNIVERSE_DOMAIN": "foo.com"}):
        assert legacy_helpers._read_environment_variables() == (False, "auto", "foo.com")


{% endblock %}