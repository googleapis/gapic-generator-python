Python Client for {{ api.naming.long_name }} API
=================================================

Quick Start
-----------

In order to use this library, you first need to go through the following steps:

1. `Select or create a Cloud Platform project.`_
2. `Enable billing for your project.`_
3. Enable the {{ api.naming.long_name }} API.
4. `Setup Authentication.`_

.. _Select or create a Cloud Platform project.: https://console.cloud.google.com/project
.. _Enable billing for your project.: https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project
.. _Setup Authentication.: https://googleapis.dev/python/google-api-core/latest/auth.html

Installation
~~~~~~~~~~~~

Install this library in a `virtualenv`_ using pip. `virtualenv`_ is a tool to
create isolated Python environments. The basic problem it addresses is one of
dependencies and versions, and indirectly permissions.

With `virtualenv`_, it's possible to install this library without needing system
install permissions, and without clashing with the installed system
dependencies.

.. _`virtualenv`: https://virtualenv.pypa.io/en/latest/


Mac/Linux
^^^^^^^^^

.. code-block:: console

    python3 -m venv <your-env>
    source <your-env>/bin/activate
    <your-env>/bin/pip install /path/to/library


Windows
^^^^^^^

.. code-block:: console

    python3 -m venv <your-env>
    <your-env>\Scripts\activate
    <your-env>\Scripts\pip.exe install \path\to\library


LOGGING
-------

This library has support to enable logging for debugging and monitoring purposes. Note that logs may contain sensitive information and care should be
taken to restrict access to the logs if they are saved, whether it be on local storage or Google Cloud Logging.

Users must **explicitly opt-in** to enable logging by configuring the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable with a valid logging scope.

A logging scope is a namespace that begins with :code:`google`.

- Valid logging scopes: :code:`google`, :code:`google.cloud.asset.v1`, :code:`google.api`, :code:`google.auth`, etc.
- Invalid logging scopes: :code:`foo`, :code:`123`, etc.

**NOTE**: If an invalid logging scope is configured, we do not act on the corresponding logger.

To set a handler that applies to all Google-based loggers:

.. code-block:: console

    export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google

To enable a handler for a specific GAPIC:

.. code-block:: console

    export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.abc.v1

:code:`GOOGLE_SDK_PYTHON_LOGGING_SCOPE` allows users to enable or disable logs by configuring a log system; it does not let them configure log levels, handlers, formatters, etc.

Loggers so configured will handle log messages at level DEBUG or higher, outputting them to stderr. The default log format for these log messages is structured log format.

Alternatively, users can define and configure a valid logging scope using the standard logging library.

A typical use case is the following, which defines a handler that applies to all Google-based loggers:

.. code-block:: python3

    import logging

    from google.cloud.translate_v3 import translate

    base_logger = logging.getLogger("google")
    base_logger.addHandler(logging.StreamHandler())
    base_logger.setLevel(logging.DEBUG)
    Client = translate.TranslationServiceClient()
