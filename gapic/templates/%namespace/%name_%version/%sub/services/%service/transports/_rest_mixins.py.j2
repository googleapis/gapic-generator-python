{#
 # Copyright (C) 2024  Google LLC
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
#}
    
{% import "%namespace/%name_%version/%sub/services/%service/_shared_macros.j2" as shared_macros %}

    {% if "rest" in opts.transport %}

    {% for name, sig in api.mixin_api_signatures.items() %} 
    @property
    def {{ name|snake_case }}(self):
        return self._{{ name }}(self._session, self._host, self._interceptor) # type: ignore
    
    class _{{ name }}(_Base{{ service.name }}RestTransport._Base{{name}}, {{service.name}}RestStub):
        {% set body_spec = api.mixin_http_options["{}".format(name)][0].body %}
        {{ shared_macros.response_method(body_spec)|indent(8) }}
        
        def __call__(self,
            request: {{ sig.request_type }}, *,
            retry: OptionalRetry=gapic_v1.method.DEFAULT,
            timeout: Optional[float]=None,
            metadata: Sequence[Tuple[str, str]]=(),
            ) -> {{ sig.response_type }}:

            r"""Call the {{- ' ' -}}
            {{ (name|snake_case).replace('_',' ')|wrap(
                    width=70, offset=45, indent=8) }}
            {{- ' ' -}} method over HTTP.

            Args:
                request ({{ sig.request_type }}):
                    The request object for {{ name }} method.
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.
            {% if sig.response_type != 'None' %}

            Returns:
                {{ sig.response_type }}: Response from {{ name }} method.
            {% endif %}
            """
            {{ shared_macros.rest_call_method_common(body_spec, name, service.name)|indent(8) }}
            
            {% if sig.response_type == "None" %}
            return self._interceptor.post_{{ name|snake_case }}(None)
            {% else %}
            
            resp = {{ sig.response_type }}()
            resp = json_format.Parse(response.content.decode("utf-8"), resp)
            resp = self._interceptor.post_{{ name|snake_case }}(resp)
            return resp
            {% endif %}

    {% endfor %}
    {% endif %} {# rest in opts.transport #}
