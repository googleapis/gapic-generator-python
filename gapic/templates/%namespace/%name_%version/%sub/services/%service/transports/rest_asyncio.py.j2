{% import "%namespace/%name_%version/%sub/services/%service/_shared_macros.j2" as shared_macros %}
{# TODO(https://github.com/googleapis/gapic-generator-python/issues/2121): Remove the following variable (and the condition later in this file) for async rest transport once support for it is GA. #}
{% set rest_async_io_enabled = api.all_library_settings[api.naming.proto_package].python_settings.experimental_features.rest_async_io_enabled %}
{% extends '_base.py.j2' %}

{% block content %}

try:
    from google.auth.aio.transport.sessions import AsyncAuthorizedSession # type: ignore
except ImportError as e:  # pragma: NO COVER
    {# TODO(https://github.com/googleapis/google-auth-library-python/pull/1577): Update the version of google-auth once the linked PR is merged. #}
    raise ImportError("async rest transport requires google.auth >= 2.x.x") from e

from google.auth.aio import credentials as ga_credentials_async  # type: ignore

from google.api_core import exceptions as core_exceptions
from google.api_core import gapic_v1
from google.api_core import retry_async as retries
from google.api_core import rest_helpers

from google.protobuf import json_format

import json  # type: ignore
import dataclasses
from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union

{{ shared_macros.operations_mixin_imports(api, service, opts) }}

from .rest_base import _Base{{ service.name }}RestTransport
from .base import DEFAULT_CLIENT_INFO as BASE_DEFAULT_CLIENT_INFO

try:
    OptionalRetry = Union[retries.AsyncRetry, gapic_v1.method._MethodDefault, None]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries.AsyncRetry, object, None]  # type: ignore

{# TODO (https://github.com/googleapis/gapic-generator-python/issues/2128): Update `rest_version` to include the transport dependency version. #}
DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=BASE_DEFAULT_CLIENT_INFO.gapic_version,
    grpc_version=None,
    rest_version=None,
)

{# TODO: Add an `_interceptor` property once implemented #}
@dataclasses.dataclass
class Async{{service.name}}RestStub:
    _session: AsyncAuthorizedSession
    _host: str

class Async{{service.name}}RestTransport(_Base{{ service.name }}RestTransport):
    """Asynchronous REST backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1
    """
    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: Optional[ga_credentials_async.Credentials] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            url_scheme: str = 'https',
            ) -> None:
        """Instantiate the transport.

       {% if not opts.rest_numeric_enums %}
       NOTE: This async REST transport functionality is currently in a beta
       state (preview). We welcome your feedback via a GitHub issue in
       this library's repository. Thank you!
       {% endif %}

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to {% if service.host %}(default: '{{ service.host }}'){% endif %}.
            credentials (Optional[google.auth.aio.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you are developing
                your own client library.
            url_scheme (str): the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        # Run the base constructor
        super().__init__(
            host=host,
            credentials=credentials,
            client_info=client_info,
            always_use_jwt_access=False,
            url_scheme=url_scheme,
            api_audience=None
        )
        self._session = AsyncAuthorizedSession(self._credentials)

    {% for method in service.methods.values()|sort(attribute="name") %}
    class _{{method.name}}(_Base{{ service.name }}RestTransport._Base{{method.name}}, Async{{service.name}}RestStub):
        def __hash__(self):
            return hash("Async{{service.name}}RestTransport.{{method.name}}")
        {% if method.http_options and not method.client_streaming %}

        {% set body_spec = method.http_options[0].body %}
        {{ shared_macros.response_method(body_spec, is_async=True)|indent(8) }}
        {% endif %}{# method.http_options and not method.client_streaming #}

        async def __call__(self,
                request: {{method.input.ident}}, *,
                retry: OptionalRetry=gapic_v1.method.DEFAULT,
                timeout: Optional[float]=None,
                metadata: Sequence[Tuple[str, str]]=(),
                {# TODO(): Update the return type for streaming once implemented. #}
                ){% if not method.void %} -> {% if not method.server_streaming %}{{method.output.ident}}{% else %}None{% endif %}{% endif %}:
    {% if method.http_options and not method.client_streaming and not method.lro and not method.server_streaming %}
            r"""Call the {{- ' ' -}}
            {{ (method.name|snake_case).replace('_',' ')|wrap(
                    width=70, offset=45, indent=8) }}
            {{- ' ' -}} method over HTTP.

            Args:
                request (~.{{ method.input.ident }}):
                    The request object.{{ ' ' }}
                    {{- method.input.meta.doc|rst(width=72, indent=16, nl=False) }}
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.
            {% if not method.void %}

            Returns:
                ~.{{ method.output.ident }}:
                    {{ method.output.meta.doc|rst(width=72, indent=16) }}
            {% endif %}
            """

            {{ shared_macros.rest_call_method_common(body_spec, method.name, service.name, is_async=True)|indent(8) }}

            {% if not method.void %}
            # Return the response
            resp = {{method.output.ident}}()
            {% if method.output.ident.is_proto_plus_type %}
            pb_resp = {{method.output.ident}}.pb(resp)
            {% else %}
            pb_resp = resp
            {% endif %}
            json_format.Parse(response.content, pb_resp, ignore_unknown_fields=True)
            {# TODO(): Add a post call for interceptor. #}
            return resp

            {% endif %}{# method.void #}
    {% else %}{# method.http_options and not method.client_streaming #}
            raise NotImplementedError(
                "Method {{ method.name }} is not available over REST transport"
            )

    {% endif %}{# method.http_options and not method.client_streaming and not method.lro and not method.server_streaming #}
    {% endfor %}
    {% for method in service.methods.values()|sort(attribute="name") %}

    @property
    def {{method.transport_safe_name|snake_case}}(self) -> Callable[
            [{{method.input.ident}}],
            {{method.output.ident}}]:
        # The return type is fine, but mypy isn't sophisticated enough to determine what's going on here.
        # In C++ this would require a dynamic_cast
        return self._{{method.name}}(self._session, self._host, self._interceptor) # type: ignore

    {% endfor %}

    @property
    def kind(self) -> str:
        return "rest_asyncio"

    async def close(self):
        await self._session.close()

{% endblock %}
