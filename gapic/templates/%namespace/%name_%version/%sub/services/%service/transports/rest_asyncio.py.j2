{% extends '_base.py.j2' %}

{% block content %}

{% import "%namespace/%name_%version/%sub/services/%service/_shared_macros.j2" as shared_macros %}
import json  # type: ignore
from google.auth.aio import credentials as ga_credentials_async  # type: ignore
from google.api_core import exceptions as core_exceptions
from google.api_core import retry_async as retries_async
from google.api_core import rest_helpers
from google.api_core import gapic_v1

from google.protobuf import json_format

from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union
import warnings

from .rest_base import _Base{{ service.name }}RestTransport

{{ shared_macros.operations_mixin_imports(api, service, opts) }}

from .base import DEFAULT_CLIENT_INFO as BASE_DEFAULT_CLIENT_INFO

from requests import __version__ as requests_version
DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=BASE_DEFAULT_CLIENT_INFO.gapic_version,
    grpc_version=None,
    rest_version=requests_version,
)


class Async{{service.name}}RestTransport(_Base{{ service.name }}RestTransport):
    """Asynchronous REST backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1

    {% if not opts.rest_numeric_enums %}
    NOTE: This async REST transport functionality is currently in a beta
    state (preview). We welcome your feedback via an issue in this
    library's source repository. Thank you!
    {% endif %}
    """


    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: Optional[ga_credentials_async.Credentials] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            url_scheme: str = 'https',
            ) -> None:
        """Instantiate the transport.

       {% if not opts.rest_numeric_enums %}
       NOTE: This async REST transport functionality is currently in a beta
       state (preview). We welcome your feedback via a GitHub issue in
       this library's repository. Thank you!
       {% endif %}

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to {% if service.host %}(default: '{{ service.host }}'){% endif %}.
            credentials (Optional[google.auth.aio.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you are developing
                your own client library.
            url_scheme: the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        # Run the base constructor
        super().__init__(
            host=host,
            credentials=credentials,
            client_info=client_info,
            always_use_jwt_access=False,
            url_scheme=url_scheme,
            api_audience=None
        )

        {# TODO (ohmayr): configure session once the following PR in google-auth-library-python
        i.e. https://github.com/googleapis/google-auth-library-python/pull/1577 is merged. #}
        self._session = None
        {# TODO (ohmayr): call prep wrapped methods #}
        {# self._prep_wrapped_messages(client_info) #}


    @property
    def kind(self) -> str:
        return "rest_asyncio"

    async def close(self):
        raise NotImplementedError("close must be implemented.")

{% endblock %}
