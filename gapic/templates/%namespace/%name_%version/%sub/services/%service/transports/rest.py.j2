{% extends '_base.py.j2' %}

{% block content %}


from google.auth.transport.requests import AuthorizedSession  # type: ignore
import json  # type: ignore
import grpc  # type: ignore
from google.auth.transport.grpc import SslCredentials  # type: ignore
from google.auth import credentials as ga_credentials  # type: ignore
from google.api_core import exceptions as core_exceptions
from google.api_core import retry as retries
from google.api_core import rest_helpers
from google.api_core import rest_streaming
from google.api_core import path_template
from google.api_core import gapic_v1

from google.protobuf import json_format
{% if service.has_lro %}
from google.api_core import operations_v1
{% endif %}
{% if opts.add_iam_methods or api.has_iam_mixin %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% if api.has_location_mixin %}
from google.cloud.location import locations_pb2 # type: ignore
{% endif %}
{% set import_ns = namespace(has_operations_mixin=false) %}
{% if api.has_operations_mixin %}
{% set import_ns.has_operations_mixin = True %}
{% endif %}
from requests import __version__ as requests_version
import dataclasses
import re
from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union
import warnings

try:
    OptionalRetry = Union[retries.Retry, gapic_v1.method._MethodDefault]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries.Retry, object]  # type: ignore


{# TODO(yon-mg): re-add python_import/ python_modules from removed diff/current grpc template code #}
{% filter sort_lines %}
{% for method in service.methods.values() %}
{{method.input.ident.python_import}}
{% if method.output.ident|string() == "operations_pb2.Operation" %}
{% set import_ns.has_operations_mixin = True %}
{% else %}
{{method.output.ident.python_import}}
{% endif %}
{% endfor %}
{% if opts.add_iam_methods %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% endfilter %}
{% if import_ns.has_operations_mixin %}
from google.longrunning import operations_pb2  # type: ignore
{% endif %}

from .base import {{service.name}}Transport, DEFAULT_CLIENT_INFO as BASE_DEFAULT_CLIENT_INFO


DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=BASE_DEFAULT_CLIENT_INFO.gapic_version,
    grpc_version=None,
    rest_version=requests_version,
)


class {{ service.name }}RestInterceptor:
    """Interceptor for {{ service.name }}.

    Interceptors are used to manipulate requests, request metadata, and responses
    in arbitrary ways.
    Example use cases include:
    * Logging
    * Verifying requests according to service or custom semantics
    * Stripping extraneous information from responses

    These use cases and more can be enabled by injecting an
    instance of a custom subclass when constructing the {{ service.name }}RestTransport.

    .. code-block:: python
        class MyCustom{{ service.name }}Interceptor({{ service.name }}RestInterceptor):
    {% for _, method in service.methods|dictsort if not method.client_streaming %}
            def pre_{{ method.name|snake_case }}(self, request, metadata):
                logging.log(f"Received request: {request}")
                return request, metadata

    {% if not method.void %}
            def post_{{ method.name|snake_case }}(self, response):
                logging.log(f"Received response: {response}")
                return response
    {% endif %}

{% endfor %}
        transport = {{ service.name }}RestTransport(interceptor=MyCustom{{ service.name }}Interceptor())
        client = {{ service.client_name }}(transport=transport)


    """
    {% for method in service.methods.values()|sort(attribute="name") if not method.client_streaming and method.http_options %}
    def pre_{{ method.name|snake_case }}(self, request: {{method.input.ident}}, metadata: Sequence[Tuple[str, str]]) -> Tuple[{{method.input.ident}}, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for {{ method.name|snake_case }}

        Override in a subclass to manipulate the request or metadata
        before they are sent to the {{ service.name }} server.
        """
        return request, metadata

    {% if not method.void %}
    {% if not method.server_streaming %}
    def post_{{ method.name|snake_case }}(self, response: {{method.output.ident}}) -> {{method.output.ident}}:
    {% else %}
    def post_{{ method.name|snake_case }}(self, response: rest_streaming.ResponseIterator) -> rest_streaming.ResponseIterator:
    {% endif %}
        """Post-rpc interceptor for {{ method.name|snake_case }}

        Override in a subclass to manipulate the response
        after it is returned by the {{ service.name }} server but before
        it is returned to user code.
        """
        return response
    {% endif %}
    {% endfor %}

    {% for name, signature in api.mixin_api_signatures.items() %}
    def pre_{{ name|snake_case }}(
        self, request: {{signature.request_type}}, metadata: Sequence[Tuple[str, str]]
    ) -> Tuple[{{signature.request_type}}, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for {{ name|snake_case }}

        Override in a subclass to manipulate the request or metadata
        before they are sent to the {{ service.name }} server.
        """
        return request, metadata

    def post_{{ name|snake_case }}(
        self, response: {{signature.response_type}}
    ) -> {{signature.response_type}}:
        """Post-rpc interceptor for {{ name|snake_case }}

        Override in a subclass to manipulate the response
        after it is returned by the {{ service.name }} server but before
        it is returned to user code.
        """
        return response
    {% endfor %}


@dataclasses.dataclass
class {{service.name}}RestStub:
    _session: AuthorizedSession
    _host: str
    _interceptor: {{ service.name }}RestInterceptor


class {{service.name}}RestTransport({{service.name}}Transport):
    """REST backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1

    {% if not opts.rest_numeric_enums %}
    NOTE: This REST transport functionality is currently in a beta
    state (preview). We welcome your feedback via an issue in this
    library's source repository. Thank you!
    {% endif %}
    """


    {# TODO(yon-mg): handle mtls stuff if that is relevant for rest transport #}
    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: Optional[ga_credentials.Credentials] = None,
            credentials_file: Optional[str] = None,
            scopes: Optional[Sequence[str]] = None,
            client_cert_source_for_mtls: Optional[Callable[[
                ], Tuple[bytes, bytes]]] = None,
            quota_project_id: Optional[str] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            always_use_jwt_access: Optional[bool] = False,
            url_scheme: str = 'https',
            interceptor: Optional[{{ service.name }}RestInterceptor] = None,
            api_audience: Optional[str] = None,
            ) -> None:
        """Instantiate the transport.

       {% if not opts.rest_numeric_enums %}
       NOTE: This REST transport functionality is currently in a beta
       state (preview). We welcome your feedback via a GitHub issue in
       this library's repository. Thank you!
       {% endif %}

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.

            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client
                certificate to configure mutual TLS HTTP channel. It is ignored
                if ``channel`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you are developing
                your own client library.
            always_use_jwt_access (Optional[bool]): Whether self signed JWT should
                be used for service account credentials.
            url_scheme: the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        # Run the base constructor
        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.
        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the
        # credentials object
        maybe_url_match = re.match("^(?P<scheme>http(?:s)?://)?(?P<host>.*)$", host)
        if maybe_url_match is None:
            raise ValueError(f"Unexpected hostname structure: {host}")  # pragma: NO COVER

        url_match_items = maybe_url_match.groupdict()

        host = f"{url_scheme}://{host}" if not url_match_items["scheme"] else host

        super().__init__(
            host=host,
            credentials=credentials,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience
        )
        self._session = AuthorizedSession(
            self._credentials, default_host=self.DEFAULT_HOST)
        {% if service.has_lro %}
        self._operations_client: Optional[operations_v1.AbstractOperationsClient] = None
        {% endif %}
        if client_cert_source_for_mtls:
            self._session.configure_mtls_channel(client_cert_source_for_mtls)
        self._interceptor = interceptor or {{ service.name }}RestInterceptor()
        self._prep_wrapped_messages(client_info)

    {% if service.has_lro %}

    @property
    def operations_client(self) -> operations_v1.AbstractOperationsClient:
        """Create the client designed to process long-running operations.

        This property caches on the instance; repeated calls return the same
        client.
        """
        # Only create a new client if we do not already have one.
        if self._operations_client is None:
            http_options: Dict[str, List[Dict[str, str]]] = {
            {% for selector, rules in api.http_options.items() %}
            {% if selector.startswith('google.longrunning.Operations') %}
                '{{ selector }}': [
                    {% for rule in rules %}
                    {
                        'method': '{{ rule.method }}',
                        'uri': '{{ rule.uri }}',
                        {% if rule.body %}
                        'body': '{{ rule.body }}',
                        {% endif %}{# rule.body #}
                    },
                    {% endfor %}{# rules #}
                ],
            {% endif %}{# selector.startswith Operations #}
            {% endfor %}{# http_options #}
            }

            rest_transport = operations_v1.OperationsRestTransport(
                    host=self._host,
                    # use the credentials which are saved
                    credentials=self._credentials,
                    scopes=self._scopes,
                    http_options=http_options,
                    path_prefix="{{ service.client_package_version }}")

            self._operations_client = operations_v1.AbstractOperationsClient(transport=rest_transport)

        # Return the client from cache.
        return self._operations_client


    {% endif %}{# service.has_lro #}
    {% for method in service.methods.values()|sort(attribute="name") %}
    class _{{method.name}}({{service.name}}RestStub):
        def __hash__(self):
            return hash("{{method.name}}")

        {% if method.http_options and not method.client_streaming %}
        {% if method.input.required_fields %}
        __REQUIRED_FIELDS_DEFAULT_VALUES: Dict[str, Any] =  {
        {% for req_field in method.input.required_fields if req_field.name in method.query_params %}
            "{{ req_field.name | camel_case }}" : {% if req_field.field_pb.type == 9 %}"{{req_field.field_pb.default_value }}"{% elif req_field.field_pb.type in [11, 14] %}{}{% else %}{{ req_field.type.python_type(req_field.field_pb.default_value or 0) }}{% endif %},{# default is str #}
        {% endfor %}
        }


        @classmethod
        def _get_unset_required_fields(cls, message_dict):
            return {k: v for k, v in cls.__REQUIRED_FIELDS_DEFAULT_VALUES.items() if k not in message_dict}
        {% endif %}{# required fields #}
        {% endif %}{# not method.client_streaming #}

        def __call__(self,
                request: {{method.input.ident}}, *,
                retry: OptionalRetry=gapic_v1.method.DEFAULT,
                timeout: Optional[float]=None,
                metadata: Sequence[Tuple[str, str]]=(),
                ){% if not method.void %} -> {% if not method.server_streaming %}{{method.output.ident}}{% else %}rest_streaming.ResponseIterator{% endif %}{% endif %}:
    {% if method.http_options and not method.client_streaming %}
            r"""Call the {{- ' ' -}}
            {{ (method.name|snake_case).replace('_',' ')|wrap(
                    width=70, offset=45, indent=8) }}
            {{- ' ' -}} method over HTTP.

            Args:
                request (~.{{ method.input.ident }}):
                    The request object.{{ ' ' }}
                    {{- method.input.meta.doc|rst(width=72, indent=16, nl=False) }}
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.
            {% if not method.void %}

            Returns:
                ~.{{ method.output.ident }}:
                    {{ method.output.meta.doc|rst(width=72, indent=16) }}
            {% endif %}
            """

            http_options: List[Dict[str, str]] = [
            {%- for rule in method.http_options %}{
                'method': '{{ rule.method }}',
                'uri': '{{ rule.uri }}',
                {% if rule.body %}
                'body': '{{ rule.body }}',
                {% endif %}{# rule.body #}
            },
            {% endfor %}{# rule in method.http_options #}
            ]
            request, metadata = self._interceptor.pre_{{ method.name|snake_case }}(request, metadata)
            {% if method.input.ident.is_proto_plus_type %}
            pb_request = {{method.input.ident}}.pb(request)
            {% else %}
            pb_request = request
            {% endif %}
            transcoded_request = path_template.transcode(http_options, pb_request)

            {% set body_spec = method.http_options[0].body %}
            {%- if body_spec %}
            # Jsonify the request body

            body = json_format.MessageToJson(
                transcoded_request['body'],
                including_default_value_fields=False,
                use_integers_for_enums={{ opts.rest_numeric_enums }}
            )
            {%- endif %}

            uri = transcoded_request['uri']
            method = transcoded_request['method']

            # Jsonify the query params
            query_params = json.loads(json_format.MessageToJson(
                transcoded_request['query_params'],
                including_default_value_fields=False,
                use_integers_for_enums={{ opts.rest_numeric_enums }},
            ))
            {% if method.input.required_fields %}
            query_params.update(self._get_unset_required_fields(query_params))
            {% endif %}{# required fields #}

            {% if opts.rest_numeric_enums %}
            query_params["$alt"] = "json;enum-encoding=int"
            {% endif %}

            # Send the request
            headers = dict(metadata)
            headers['Content-Type'] = 'application/json'
            response = getattr(self._session, method)(
                "{host}{uri}".format(host=self._host, uri=uri),
                timeout=timeout,
                headers=headers,
                params=rest_helpers.flatten_query_params(query_params, strict=True),
                {% if body_spec %}
                data=body,
                {% endif %}
                )

            # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
            # subclass.
            if response.status_code >= 400:
                raise core_exceptions.from_http_response(response)

            {% if not method.void %}
            # Return the response
            {% if method.lro %}
            resp = operations_pb2.Operation()
            json_format.Parse(response.content, resp, ignore_unknown_fields=True)
            {% elif method.server_streaming %}
            resp = rest_streaming.ResponseIterator(response, {{method.output.ident}})
            {% else %}
            resp = {{method.output.ident}}()
            {% if method.output.ident.is_proto_plus_type %}
            pb_resp = {{method.output.ident}}.pb(resp)
            {% else %}
            pb_resp = resp
            {% endif %}

            json_format.Parse(response.content, pb_resp, ignore_unknown_fields=True)
            {% endif %}{# method.lro #}
            resp = self._interceptor.post_{{ method.name|snake_case }}(resp)
            return resp

            {% endif %}{# method.void #}
    {% else %}{# method.http_options and not method.client_streaming #}
            raise NotImplementedError(
                "Method {{ method.name }} is not available over REST transport"
            )
    {% endif %}{# method.http_options and not method.client_streaming #}
    {% endfor %}
    {% for method in service.methods.values()|sort(attribute="name") %}

    @property
    def {{method.transport_safe_name|snake_case}}(self) -> Callable[
            [{{method.input.ident}}],
            {{method.output.ident}}]:
        # The return type is fine, but mypy isn't sophisticated enough to determine what's going on here.
        # In C++ this would require a dynamic_cast
        return self._{{method.name}}(self._session, self._host, self._interceptor) # type: ignore

    {% endfor %}

    {% include '%namespace/%name_%version/%sub/services/%service/transports/_rest_mixins.py.j2' %}

    @property
    def kind(self) -> str:
        return "rest"

    def close(self):
        self._session.close()


__all__=(
    '{{ service.name }}RestTransport',
)
{% endblock %}
