{% extends '_base.py.j2' %}

{% block content %}


{% if opts.async_rest %}
from google.auth.aio.transport.sessions import AuthorizedSession  # type: ignore
from google.auth.aio import credentials as ga_credentials  # type: ignore
from google.api_core import rest_streaming_async
from google.api_core import retry_async as retries_async
{% else %}
from google.auth.transport.requests import AuthorizedSession  # type: ignore
{# TODO (ohmayr): this should be cleaned up. #}
from google.auth.transport.grpc import SslCredentials  # type: ignore
from google.auth import credentials as ga_credentials  # type: ignore
from google.api_core import rest_streaming
from google.api_core import retry as retries
{% endif %}
import json  # type: ignore
{# TODO (ohmayr): why is grpc imported in a rest transport #}
import grpc  # type: ignore  # type: ignore
from google.api_core import exceptions as core_exceptions
{# TODO (ohmayr): we may want an async version of rest helpers #}
from google.api_core import rest_helpers  # type: ignore
from google.api_core import path_template
{# TODO (ohmayr): leverage async stuff under gapic_v1 submodule #}
from google.api_core import gapic_v1  # type: ignore

from google.protobuf import json_format
{% if service.has_lro %}
{# TODO (ohmayr): leverage async stuff under this submodule #}
from google.api_core import operations_v1  # type: ignore
{% endif %}
{% if opts.add_iam_methods or api.has_iam_mixin %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% if api.has_location_mixin %}
from google.cloud.location import locations_pb2 # type: ignore
{% endif %}
from .base import {{service.name}}Transport, DEFAULT_CLIENT_INFO as BASE_DEFAULT_CLIENT_INFO

import dataclasses
import re
from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union
import warnings

{% if opts.async_rest %}
try:
    {# TODO (ohmayr): should use method_async here but currently it does not have _MethodDefault. #}
    OptionalRetry = Union[retries_async.AsyncRetry, gapic_v1.method._MethodDefault, None]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries_async.AsyncRetry, object, None] # type: ignore
{% else %}
try:
    OptionalRetry = Union[retries.Retry, gapic_v1.method._MethodDefault, None]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries.Retry, object, None]  # type: ignore
{% endif %}

{% import "%namespace/%name_%version/%sub/services/%service/_shared_macros.j2" as shared_macros %}

{{ shared_macros.operations_mixin_imports(api, service, opts) }}

from .rest_base import _Base{{ service.name }}RestTransport, {{ service.name }}RestInterceptor

{% if opts.async_rest %}
from aiohttp import __version__ as requests_version
{% else %}
from requests import __version__ as requests_version
{% endif %}

DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=BASE_DEFAULT_CLIENT_INFO.gapic_version,
    grpc_version=None,
    rest_version=requests_version,
)

@dataclasses.dataclass
class {{service.name}}RestStub:
    _session: AuthorizedSession
    _host: str
    _interceptor: {{ service.name }}RestInterceptor

{% set async_prefix = "async " if opts.async_rest else "" %}
{% set await_prefix = "await " if opts.async_rest else "" %}

class {{ service.name }}{% if opts.async_rest %}Async{% endif %}RestTransport(_Base{{ service.name }}RestTransport):
    """{% if opts.async_rest %}Asynchronous{% endif %}REST backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1

    {% if not opts.rest_numeric_enums %}
    NOTE: This REST transport functionality is currently in a beta
    state (preview). We welcome your feedback via an issue in this
    library's source repository. Thank you!
    {% endif %}
    """


    {# TODO(yon-mg): handle mtls stuff if that is relevant for rest transport #}
    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: Optional[ga_credentials.Credentials] = None,
            credentials_file: Optional[str] = None,
            scopes: Optional[Sequence[str]] = None,
            client_cert_source_for_mtls: Optional[Callable[[
                ], Tuple[bytes, bytes]]] = None,
            quota_project_id: Optional[str] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            always_use_jwt_access: Optional[bool] = False,
            url_scheme: str = 'https',
            interceptor: Optional[{{ service.name }}RestInterceptor] = None,
            api_audience: Optional[str] = None,
            ) -> None:
        """Instantiate the transport.

       {% if not opts.rest_numeric_enums %}
       NOTE: This REST transport functionality is currently in a beta
       state (preview). We welcome your feedback via a GitHub issue in
       this library's repository. Thank you!
       {% endif %}

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to {% if service.host %}(default: '{{ service.host }}'){% endif %}.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.

            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client
                certificate to configure mutual TLS HTTP channel. It is ignored
                if ``channel`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you are developing
                your own client library.
            always_use_jwt_access (Optional[bool]): Whether self signed JWT should
                be used for service account credentials.
            url_scheme: the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        # Run the base constructor
        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.
        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the
        # credentials object
        maybe_url_match = re.match("^(?P<scheme>http(?:s)?://)?(?P<host>.*)$", host)
        if maybe_url_match is None:
            raise ValueError(f"Unexpected hostname structure: {host}")  # pragma: NO COVER

        url_match_items = maybe_url_match.groupdict()

        host = f"{url_scheme}://{host}" if not url_match_items["scheme"] else host

        super().__init__(
            host=host,
            credentials=credentials,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
            api_audience=api_audience
        )
        {% if opts.async_rest %}
        # Note: asynchronous AuthorizedSession does not attempt to use self-signed JWTs
        # and does not support configuring `DEFAULT_HOST`.
        self._session = AuthorizedSession(self._credentials)
        {% else %}
        self._session = AuthorizedSession(
            self._credentials, default_host=self.DEFAULT_HOST)
        {% if service.has_lro %}
        self._operations_client: Optional[operations_v1.AbstractOperationsClient] = None
        if client_cert_source_for_mtls:
            self._session.configure_mtls_channel(client_cert_source_for_mtls)
        {% endif %}
        {% endif %}
        self._interceptor = interceptor or {{ service.name }}RestInterceptor()

    {% if service.has_lro %}


    {% endif %}{# service.has_lro #}
    {% for method in service.methods.values()|sort(attribute="name") %}
    class _{{method.name}}(_Base{{ service.name }}RestTransport._Base{{method.name}}, {{service.name}}RestStub):

        {% if method.http_options and not method.client_streaming %}

        {{async_prefix ~ "def _get_response(self, body, host, metadata, query_params, session, timeout, transcoded_request):" | indent(4)}}
            uri = transcoded_request['uri']
            method = transcoded_request['method']
            headers = dict(metadata)
            headers['Content-Type'] = 'application/json'

            response = {{ await_prefix }}getattr(session, method)(
                "{host}{uri}".format(host=host, uri=uri),
                timeout=timeout,
                headers=headers,
                params=rest_helpers.flatten_query_params(query_params, strict=True),
                {% set body_spec = method.http_options[0].body %}
                {% if body_spec %}
                data=body,
                {% endif %}
                )
            return response

        {% endif %}

        {{async_prefix ~ "def __call__(self," | indent(4)}}
                request: {{method.input.ident}}, *,
                retry: OptionalRetry=gapic_v1.method.DEFAULT,
                timeout: Optional[float]=None,
                metadata: Sequence[Tuple[str, str]]=(),
                ){% if not method.void %} -> {% if not method.server_streaming %}{{method.output.ident}}{% else %}rest_streaming.ResponseIterator{% endif %}{% endif %}:
    {% if method.http_options and not method.client_streaming %}
            r"""Call the {{- ' ' -}}
            {{ (method.name|snake_case).replace('_',' ')|wrap(
                    width=70, offset=45, indent=8) }}
            {{- ' ' -}} method over HTTP.

            Args:
                request (~.{{ method.input.ident }}):
                    The request object.{{ ' ' }}
                    {{- method.input.meta.doc|rst(width=72, indent=16, nl=False) }}
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.
            {% if not method.void %}

            Returns:
                ~.{{ method.output.ident }}:
                    {{ method.output.meta.doc|rst(width=72, indent=16) }}
            {% endif %}
            """
            http_options = _Base{{ service.name }}RestTransport._Base{{method.name}}._get_http_options()
            request, metadata = self._interceptor.pre_{{ method.name|snake_case }}(request, metadata)
            transcoded_request = _Base{{ service.name }}RestTransport._Base{{method.name}}._get_transcoded_request(http_options, request)

            {% set body_spec = method.http_options[0].body %}
            {%- if body_spec %}
            body = _Base{{ service.name }}RestTransport._Base{{method.name}}._get_request_body_json(transcoded_request)
            {% endif %} {# body_spec #}

            query_params = self._get_query_params_json(transcoded_request)
            # Send the request
            response = {{ await_prefix }}self._get_response(body, self.host, metadata, query_params, self._session, timeout, transcoded_request)

            # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
            # subclass.
            if response.status_code >= 400:
                raise core_exceptions.from_http_response(response)

            {% if not method.void %}
            # Return the response
            {% if method.lro %}
            resp = operations_pb2.Operation()
            json_format.Parse(response.content, resp, ignore_unknown_fields=True)
            {% elif method.server_streaming %}
            resp = rest_streaming.ResponseIterator(response, {{method.output.ident}})
            {% else %}
            resp = {{method.output.ident}}()
            {% if method.output.ident.is_proto_plus_type %}
            pb_resp = {{method.output.ident}}.pb(resp)
            {% else %}
            pb_resp = resp
            {% endif %}

            json_format.Parse(response.content, pb_resp, ignore_unknown_fields=True)
            {% endif %}{# method.lro #}
            resp = self._interceptor.post_{{ method.name|snake_case }}(resp)
            return resp

            {% endif %}{# method.void #}
    {% else %}{# method.http_options and not method.client_streaming #}
            raise NotImplementedError(
                "Method {{ method.name }} is not available over REST transport"
            )
    {% endif %}{# method.http_options and not method.client_streaming #}
    {% endfor %}

    {% include '%namespace/%name_%version/%sub/services/%service/transports/_rest_mixins.py.j2' %}


    {% if opts.async_rest %}
    @property
    def kind(self) -> str:
        return "rest_asyncio"

    async def close(self):
        await self._session.close()
    {% else %}
    @property
    def kind(self) -> str:
        return "rest"

    def close(self):
        self._session.close()
    {% endif %}


__all__=(
    '{{ service.name }}{% if opts.async_rest %}Async{% endif %}RestTransport',
)
{% endblock %}
