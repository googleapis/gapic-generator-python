from google.auth.transport.requests import AuthorizedSession  # type: ignore
import json  # type: ignore
import grpc  # type: ignore
from google.auth.transport.grpc import SslCredentials  # type: ignore
from google.auth import credentials as ga_credentials  # type: ignore
from google.api_core import exceptions as core_exceptions  # type: ignore
from google.api_core import retry as retries  # type: ignore
from google.api_core import rest_helpers  # type: ignore
from google.api_core import path_template  # type: ignore
from google.api_core import gapic_v1  # type: ignore
{% if service.has_lro %}
from google.api_core import operations_v1
{% endif %}
from requests import __version__ as requests_version
from typing import Callable, Dict, Optional, Sequence, Tuple, Union
import warnings

try:
    OptionalRetry = Union[retries.Retry, gapic_v1.method._MethodDefault]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries.Retry, object]  # type: ignore

{% extends '_base.py.j2' %}

{% block content %}


{% if service.has_lro %}
{% endif %}


{# TODO(yon-mg): re-add python_import/ python_modules from removed diff/current grpc template code #}
{% filter sort_lines %}
{% for method in service.methods.values() %}
{{method.input.ident.python_import}}
{{method.output.ident.python_import}}
{% endfor %}
{% if opts.add_iam_methods %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% endfilter %}

from .base import {{service.name}}Transport, DEFAULT_CLIENT_INFO as BASE_DEFAULT_CLIENT_INFO


DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
    gapic_version=BASE_DEFAULT_CLIENT_INFO.gapic_version,
    grpc_version=None,
    rest_version=requests_version,
)

class {{service.name}}RestTransport({{service.name}}Transport):
    """REST backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1
    """
    {# TODO(yon-mg): handle mtls stuff if that's relevant for rest transport #}
    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% endif %},
            credentials: ga_credentials.Credentials=None,
            credentials_file: str=None,
            scopes: Sequence[str]=None,
            client_cert_source_for_mtls: Callable[[
                ], Tuple[bytes, bytes]]=None,
            quota_project_id: Optional[str]=None,
            client_info: gapic_v1.client_info.ClientInfo=DEFAULT_CLIENT_INFO,
            always_use_jwt_access: Optional[bool]=False,
            url_scheme: str='https',
            ) -> None:
        """Instantiate the transport.

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.

            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client
                certificate to configure mutual TLS HTTP channel. It is ignored
                if ``channel`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.
            always_use_jwt_access (Optional[bool]): Whether self signed JWT should
                be used for service account credentials.
            url_scheme: the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        # Run the base constructor
        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.
        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the
        # credentials object
        super().__init__(
            host=host,
            credentials=credentials,
            client_info=client_info,
            always_use_jwt_access=always_use_jwt_access,
        )
        self._session = AuthorizedSession(
            self._credentials, default_host=self.DEFAULT_HOST)
        {% if service.has_lro %}
        self._operations_client = None
        {% endif %}
        if client_cert_source_for_mtls:
            self._session.configure_mtls_channel(client_cert_source_for_mtls)
        self._prep_wrapped_messages(client_info)

    {% if service.has_lro %}

    @property
    def operations_client(self) -> operations_v1.OperationsClient:
        """Create the client designed to process long-running operations.

        This property caches on the instance; repeated calls return the same
        client.
        """
        # Sanity check: Only create a new client if we do not already have one.
        if self._operations_client is None:
            from google.api_core import grpc_helpers

            self._operations_client = operations_v1.OperationsClient(
                grpc_helpers.create_channel(
                    self._host,
                    credentials=self._credentials,
                    default_scopes=cls.AUTH_SCOPES,
                    scopes=self._scopes,
                    default_host=cls.DEFAULT_HOST,
                    options=[
                        ("grpc.max_send_message_length", -1),
                        ("grpc.max_receive_message_length", -1),
                    ],
                )
            )

        # Return the client from cache.
        return self._operations_client


    {% endif %}
    {% for method in service.methods.values() %}
    {%- if method.http_options and not method.lro and not (method.server_streaming or method.client_streaming) %}
    def _{{method.name | snake_case}}(self,
            request: {{method.input.ident}}, *,
            retry: OptionalRetry=gapic_v1.method.DEFAULT,
            timeout: float=None,
            metadata: Sequence[Tuple[str, str]]=(),
            ) -> {{method.output.ident}}:
        r"""Call the {{- ' ' -}}
        {{ (method.name|snake_case).replace('_',' ')|wrap(
                width=70, offset=45, indent=8) }}
        {{- ' ' -}} method over HTTP.

        Args:
            request (~.{{ method.input.ident }}):
                The request object.{{ ' ' }}
                {{- method.input.meta.doc|rst(width=72, indent=16) }}
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        {% if not method.void %}

        Returns:
            ~.{{ method.output.ident }}:
                {{ method.output.meta.doc|rst(width=72, indent=16) }}
        {% endif %}
        """

        http_options = [
        {%- for rule in method.http_options %}{
            'method': '{{ rule.method }}',
            'uri': '{{ rule.uri }}',
            {%- if rule.body %}
            'body': '{{ rule.body }}',
            {%- endif %}
        },
        {%- endfor %}]

        request_kwargs = {{method.input.ident}}.to_dict(request)
        transcoded_request = path_template.transcode(
            http_options, **request_kwargs)

        {% set body_spec = method.http_options[0].body %}
        {%- if body_spec %}

        # Jsonify the request body
        body = {% if body_spec == '*' -%}
            {{method.input.ident}}.to_json(
            {{method.input.ident}}(transcoded_request['body']),
        {%- else -%}
            {{method.input.fields[body_spec].type.ident}}.to_json(
            {{method.input.fields[body_spec].type.ident}}(
                transcoded_request['body']),
        {%- endif %}

            including_default_value_fields=False,
            use_integers_for_enums=False
        )
        {%- endif %}{# body_spec #}

        uri = transcoded_request['uri']
        method = transcoded_request['method']

        # Jsonify the query params
        query_params = json.loads({{method.input.ident}}.to_json(
            {{method.input.ident}}(transcoded_request['query_params']),
            including_default_value_fields=False,
            use_integers_for_enums=False
        ))

        # Send the request
        headers = dict(metadata)
        headers['Content-Type'] = 'application/json'
        response=getattr(self._session, method)(
            # Replace with proper schema configuration (http/https) logic
            "https://{host}{uri}".format(host=self._host, uri=uri),
            timeout=timeout,
            headers=headers,
            params=rest_helpers.flatten_query_params(query_params),
            {% if body_spec %}
            data=body,
            {% endif %}
        )

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)
        {% if not method.void %}

        # Return the response
        return {{method.output.ident}}.from_json(
            response.content,
            ignore_unknown_fields=True
        )
        {% endif %}
    {% else %}

    def _{{method.name | snake_case}}(self,
            request: {{method.input.ident}}, *,
            metadata: Sequence[Tuple[str, str]]=(),
            ) -> {{method.output.ident}}:
        r"""Placeholder: Unable to implement over REST
        """
        {%- if not method.http_options %}

        raise RuntimeError(
            "Cannot define a method without a valid 'google.api.http' annotation.")
        {%- elif method.lro %}

        raise NotImplementedError(
            "LRO over REST is not yet defined for python client.")
        {%- elif method.server_streaming or method.client_streaming %}

        raise NotImplementedError(
            "Streaming over REST is not yet defined for python client")
        {%- else %}

        raise NotImplementedError()
        {%- endif %}
    {%- endif %}


    {% endfor %}
    {%- for method in service.methods.values() %}

    @ property
    def {{method.name | snake_case}}(self) -> Callable[
            [{{method.input.ident}}],
            {{method.output.ident}}]:
        return self._{{method.name | snake_case}}
    {%- endfor %}

    def close(self):
        self._session.close()


__all__=(
    '{{ service.name }}RestTransport',
)
{% endblock %}
