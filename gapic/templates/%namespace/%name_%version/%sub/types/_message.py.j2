class {{ message.name }}({{ p }}.Message):
    r"""{{ message.meta.doc|rst(indent=4) }}{% if message.fields|length %}

    Attributes:
    {%- for field in message.fields.values() %}
        {{ field.name }} ({{ field.ident.sphinx }}):
            {{ field.meta.doc|rst(indent=12, nl=False) }}
    {%- endfor %}
    {% endif -%}
    """
    {# Iterate over nested enums. -#}
    {% for enum in message.nested_enums.values() -%}
        {% filter indent %}
            {%- include '%namespace/%name_%version/%sub/types/_enum.py.j2' %}
        {% endfilter %}
    {% endfor -%}

    {# Iterate over nested messages. -#}
    {% for submessage in message.nested_messages.values() -%}
        {% if not submessage.map -%}
        {% with message = submessage %}{% filter indent %}
            {%- include '%namespace/%name_%version/%sub/types/_message.py.j2' %}
        {% endfilter %}{% endwith %}
        {% endif %}
    {% endfor -%}

    {% if "next_page_token" in message.fields.values()|map(attribute='name') %}
    @property
    def raw_page(self):
        return self
    {% endif %}

    {# Iterate over fields. -#}
    {% for field in message.fields.values() -%}
    {% if field.map -%}
    {% with key_field = field.message.fields['key'], value_field = field.message.fields['value'] -%}
    {{ field.name }} = {{ p }}.MapField(
        {{- p }}.{{ key_field.proto_type }}, {{ p }}.{{ value_field.proto_type }}, number={{ field.number }}
    {%- if value_field.enum or value_field.message %},
        {{ value_field.proto_type.lower() }}={{ value_field.type.ident.rel(message.ident) }},
    {% endif %})                {# enum or message#}
    {% endwith -%}
    {% else -%}                 {# field.map #}
    {{ field.name }} = {{ p }}.{% if field.repeated %}Repeated{% endif %}Field(
        {{- p }}.{{ field.proto_type }}, number={{ field.number }}{% if field.proto3_optional %}, optional=True{% elif field.oneof %}, oneof='{{ field.oneof }}'{% endif %}
    {%- if field.enum or field.message %},
        {{ field.proto_type.lower() }}={{ field.type.ident.rel(message.ident) }},
    {% endif %})                {# enum or message #}
    {% endif -%}                {# field.map #}
    {% endfor -%} {# for field in message.fields.values#}
{{ '\n\n' }}
