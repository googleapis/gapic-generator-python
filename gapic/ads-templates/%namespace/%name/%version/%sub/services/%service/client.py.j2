{% extends '_base.py.j2' %}

{% block content %}

from collections import OrderedDict
from distutils import util
import os
import re
from typing import Callable, Dict, Optional, {% if service.any_server_streaming %}Iterable, {% endif %}{% if service.any_client_streaming %}Iterator, {% endif %}Sequence, Tuple, Type, Union
import pkg_resources

from google.api_core import client_options as client_options_lib  # type: ignore
from google.api_core import exceptions as core_exceptions         # type: ignore
from google.api_core import gapic_v1                              # type: ignore
from google.api_core import retry as retries                      # type: ignore
from google.auth import credentials as ga_credentials             # type: ignore
from google.auth.transport import mtls                            # type: ignore
from google.auth.transport.grpc import SslCredentials             # type: ignore
from google.auth.exceptions import MutualTLSChannelError          # type: ignore
from google.oauth2 import service_account                         # type: ignore

{% filter sort_lines %}
{% for method in service.methods.values() %}
{% for ref_type in method.flat_ref_types %}
{{ ref_type.ident.python_import }}
{% endfor %}
{% endfor %}
{% endfilter %}
from .transports.base import {{ service.name }}Transport, DEFAULT_CLIENT_INFO
from .transports.grpc import {{ service.name }}GrpcTransport


class {{ service.client_name }}Meta(type):
    """Metaclass for the {{ service.name }} client.

    This provides class-level methods for building and retrieving
    support objects (e.g. transport) without polluting the client instance
    objects.
    """
    _transport_registry = OrderedDict()  # type: Dict[str, Type[{{ service.name }}Transport]]
    _transport_registry['grpc'] = {{ service.name }}GrpcTransport

    def get_transport_class(cls,
            label: str = None,
            ) -> Type[{{ service.name }}Transport]:
        """Return an appropriate transport class.

        Args:
            label: The name of the desired transport. If none is
                provided, then the first transport in the registry is used.

        Returns:
            The transport class to use.
        """
        # If a specific transport is requested, return that one.
        if label:
            return cls._transport_registry[label]

        # No transport is requested; return the default (that is, the first one
        # in the dictionary).
        return next(iter(cls._transport_registry.values()))


class {{ service.client_name }}(metaclass={{ service.client_name }}Meta):
    """{{ service.meta.doc|rst(width=72, indent=4) }}"""

    @staticmethod
    def _get_default_mtls_endpoint(api_endpoint):
        """Convert api endpoint to mTLS endpoint.
        Convert "*.sandbox.googleapis.com" and "*.googleapis.com" to
        "*.mtls.sandbox.googleapis.com" and "*.mtls.googleapis.com" respectively.
        Args:
            api_endpoint (Optional[str]): the api endpoint to convert.
        Returns:
            str: converted mTLS api endpoint.
        """
        if not api_endpoint:
            return api_endpoint

        mtls_endpoint_re = re.compile(
            r"(?P<name>[^.]+)(?P<mtls>\.mtls)?(?P<sandbox>\.sandbox)?(?P<googledomain>\.googleapis\.com)?"
        )

        m = mtls_endpoint_re.match(api_endpoint)
        name, mtls, sandbox, googledomain = m.groups()
        if mtls or not googledomain:
            return api_endpoint

        if sandbox:
            return api_endpoint.replace(
                "sandbox.googleapis.com", "mtls.sandbox.googleapis.com"
            )

        return api_endpoint.replace(".googleapis.com", ".mtls.googleapis.com")

    DEFAULT_ENDPOINT = {% if service.host %}'{{ service.host }}'{% else %}None{% endif %}

    DEFAULT_MTLS_ENDPOINT = _get_default_mtls_endpoint.__func__(  # type: ignore
        DEFAULT_ENDPOINT
    )

    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs):
        """Creates an instance of this client using the provided credentials info.

        Args:
            info (dict): The service account private key info.
            args: Additional arguments to pass to the constructor.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            {{ service.client_name }}: The constructed client.
        """
        credentials = service_account.Credentials.from_service_account_info(info)
        kwargs["credentials"] = credentials
        return cls(*args, **kwargs)

    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs):
        """Creates an instance of this client using the provided credentials
        file.

        Args:
            filename (str): The path to the service account private key json
                file.
            args: Additional arguments to pass to the constructor.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            {{ service.client_name }}: The constructed client.
        """
        credentials = service_account.Credentials.from_service_account_file(
            filename)
        kwargs['credentials'] = credentials
        return cls(*args, **kwargs)

    from_service_account_json = from_service_account_file

    @property
    def transport(self) -> {{ service.name }}Transport:
        """Return the transport used by the client instance.

        Returns:
            {{ service.name }}Transport: The transport used by the client instance.
        """
        return self._transport


    {% for message in service.resource_messages|sort(attribute="resource_type") %}
    @staticmethod
    def {{ message.resource_type|snake_case }}_path({% for arg in message.resource_path_args %}{{ arg }}: str,{% endfor %}) -> str:
        """Return a fully-qualified {{ message.resource_type|snake_case }} string."""
        return "{{ message.resource_path }}".format({% for arg in message.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})


    @staticmethod
    def parse_{{ message.resource_type|snake_case }}_path(path: str) -> Dict[str,str]:
        """Parse a {{ message.resource_type|snake_case }} path into its component segments."""
        m = re.match(r"{{ message.path_regex_str }}", path)
        return m.groupdict() if m else {}
    {% endfor %}
    {% for resource_msg in service.common_resources.values()|sort(attribute="type_name") %}
    @staticmethod
    def common_{{ resource_msg.message_type.resource_type|snake_case }}_path({% for arg in resource_msg.message_type.resource_path_args %}{{ arg }}: str, {%endfor %}) -> str:
        """Return a fully-qualified {{ resource_msg.message_type.resource_type|snake_case }} string."""
        return "{{ resource_msg.message_type.resource_path }}".format({% for arg in resource_msg.message_type.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})

    @staticmethod
    def parse_common_{{ resource_msg.message_type.resource_type|snake_case }}_path(path: str) -> Dict[str,str]:
        """Parse a {{ resource_msg.message_type.resource_type|snake_case }} path into its component segments."""
        m = re.match(r"{{ resource_msg.message_type.path_regex_str }}", path)
        return m.groupdict() if m else {}

    {% endfor %} {# common resources #}

    def __init__(self, *,
            credentials: Optional[ga_credentials.Credentials] = None,
            transport: Union[str, {{ service.name }}Transport, None] = None,
            client_options: Optional[client_options_lib.ClientOptions] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            ) -> None:
        """Instantiate the {{ (service.client_name|snake_case).replace('_', ' ') }}.

        Args:
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            transport (Union[str, ~.{{ service.name }}Transport]): The
                transport to use. If set to None, a transport is chosen
                automatically.
            client_options (google.api_core.client_options.ClientOptions): Custom options for the
                client. It won't take effect if a ``transport`` instance is provided.
                (1) The ``api_endpoint`` property can be used to override the
                default endpoint provided by the client. GOOGLE_API_USE_MTLS_ENDPOINT
                environment variable can also be used to override the endpoint:
                "always" (always use the default mTLS endpoint), "never" (always
                use the default regular endpoint) and "auto" (auto switch to the
                default mTLS endpoint if client certificate is present, this is
                the default value). However, the ``api_endpoint`` property takes
                precedence if provided.
                (2) If GOOGLE_API_USE_CLIENT_CERTIFICATE environment variable
                is "true", then the ``client_cert_source`` property can be used
                to provide client certificate for mutual TLS transport. If
                not provided, the default SSL client certificate will be used if
                present. If GOOGLE_API_USE_CLIENT_CERTIFICATE is "false" or not
                set, no client certificate will be used.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.

        Raises:
            google.auth.exceptions.MutualTLSChannelError: If mutual TLS transport
                creation failed for any reason.
        """
        if isinstance(client_options, dict):
            client_options = client_options_lib.from_dict(client_options)
        if client_options is None:
            client_options = client_options_lib.ClientOptions()

        # Create SSL credentials for mutual TLS if needed.
        use_client_cert = bool(util.strtobool(os.getenv("GOOGLE_API_USE_CLIENT_CERTIFICATE", "false")))

        ssl_credentials = None
        is_mtls = False
        if use_client_cert:
            if client_options.client_cert_source:
                import grpc  # type: ignore

                cert, key = client_options.client_cert_source()
                ssl_credentials = grpc.ssl_channel_credentials(
                    certificate_chain=cert, private_key=key
                )
                is_mtls = True
            else:
                creds = SslCredentials()
                is_mtls = creds.is_mtls
                ssl_credentials = creds.ssl_credentials if is_mtls else None

        # Figure out which api endpoint to use.
        if client_options.api_endpoint is not None:
            api_endpoint = client_options.api_endpoint
        else:
            use_mtls_env = os.getenv("GOOGLE_API_USE_MTLS_ENDPOINT", "auto")
            if use_mtls_env == "never":
                api_endpoint = self.DEFAULT_ENDPOINT
            elif use_mtls_env == "always":
                api_endpoint = self.DEFAULT_MTLS_ENDPOINT
            elif use_mtls_env == "auto":
                api_endpoint = self.DEFAULT_MTLS_ENDPOINT if is_mtls else self.DEFAULT_ENDPOINT
            else:
                raise MutualTLSChannelError(
                    "Unsupported GOOGLE_API_USE_MTLS_ENDPOINT value. Accepted values: never, auto, always"
                )

        # Save or instantiate the transport.
        # Ordinarily, we provide the transport, but allowing a custom transport
        # instance provides an extensibility point for unusual situations.
        if isinstance(transport, {{ service.name }}Transport):
            # transport is a {{ service.name }}Transport instance.
            if credentials:
                raise ValueError('When providing a transport instance, '
                                 'provide its credentials directly.')
            self._transport = transport
        elif isinstance(transport, str):
            Transport = type(self).get_transport_class(transport)
            self._transport = Transport(
                credentials=credentials, host=self.DEFAULT_ENDPOINT
            )
        else:
            self._transport = {{ service.name }}GrpcTransport(
                credentials=credentials,
                host=api_endpoint,
                ssl_channel_credentials=ssl_credentials,
                client_info=client_info,
              )


    {% for method in service.methods.values() %}
    def {{ method.name|snake_case }}(self,
            {% if not method.client_streaming %}
            request: {{ method.input.ident }} = None,
            *,
            {% for field in method.flattened_fields.values() %}
            {{ field.name }}: {{ field.ident }} = None,
            {% endfor %}
            {% else %}
            requests: Iterator[{{ method.input.ident }}] = None,
            *,
            {% endif %}
            retry: retries.Retry = gapic_v1.method.DEFAULT,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            {% if not method.server_streaming %}
            ) -> {{ method.client_output.ident }}:
            {% else %}
            ) -> Iterable[{{ method.client_output.ident }}]:
            {% endif %}
        r"""{{ method.meta.doc|rst(width=72, indent=8) }}

        Args:
            {% if not method.client_streaming %}
            request (:class:`{{ method.input.ident.sphinx }}`):
                The request object.{{ ' ' }}
                {{- method.input.meta.doc|wrap(width=72, offset=36, indent=16) }}
            {% for key, field in method.flattened_fields.items() %}
            {{ field.name }} (:class:`{{ field.ident.sphinx }}`):
                {{ field.meta.doc|rst(width=72, indent=16) }}
                This corresponds to the ``{{ key }}`` field
                on the ``request`` instance; if ``request`` is provided, this
                should not be set.
            {% endfor %}
            {% else %}
            requests (Iterator[`{{ method.input.ident.sphinx }}`]):
                The request object iterator.{{ ' ' }}
                {{- method.input.meta.doc|wrap(width=72, offset=36, indent=16) }}
            {% endif %}
            retry (google.api_core.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        {% if not method.void %}

        Returns:
            {% if not method.server_streaming %}
            {{ method.client_output.ident.sphinx }}:
            {% else %}
            Iterable[{{ method.client_output.ident.sphinx }}]:
            {% endif %}
                {{ method.client_output.meta.doc|rst(width=72, indent=16, source_format='rst') }}
        {% endif %}
        """
        {% if method.is_deprecated %}
        warnings.warn("{{ method.name|snake_case }} is deprecated", warnings.DeprecationWarning)
        {% endif %}
        {% if not method.client_streaming %}
        # Create or coerce a protobuf request object.
        {% if method.flattened_fields %}
        # Sanity check: If we got a request object, we should *not* have
        # gotten any keyword arguments that map to the request.
        if request is not None and any([{{ method.flattened_fields.values()|join(', ', attribute='name') }}]):
            raise ValueError('If the `request` argument is set, then none of '
                             'the individual field arguments should be set.')

        {% endif %} {# method.flattened_fields #}
        {% if method.input.ident.package != method.ident.package %}{# request lives in a different package, so there is no proto wrapper #}
        # The request isn't a proto-plus wrapped type.
        # so it must be constructed via keyword expansion.
        if isinstance(request, dict):
            request = {{ method.input.ident }}(**request)
        {% if method.flattened_fields %}{# Cross-package req and flattened fields #}
        elif not request:
            request = {{ method.input.ident }}({% if method.input.ident.package != method.ident.package %}{% for f in method.flattened_fields.values() %}{{ f.name }}={{ f.name }}, {% endfor %}{% endif %})
        {% endif %}{# Cross-package req and flattened fields #}
        {% else %}  {# Request is in _our_ package #}
        # Minor optimization to avoid making a copy if the user passes
        # in a {{ method.input.ident }}.
        # There's no risk of modifying the input as we've already verified
        # there are no flattened fields.
        if not isinstance(request, {{ method.input.ident }}):
            request = {{ method.input.ident }}(request)
        {% endif %} {# different request package #}
        {#- Vanilla python protobuf wrapper types cannot _set_ repeated fields #}
            {% if method.flattened_fields and method.input.ident.package == method.ident.package %}
            # If we have keyword arguments corresponding to fields on the
            # request, apply these.
            {% endif %}
            {% for key, field in method.flattened_fields.items() if not field.repeated or method.input.ident.package == method.ident.package %}
            if {{ field.name }} is not None:
                request.{{ key }} = {{ field.name }}
            {% endfor %}
            {# Map-y fields can be _updated_, however #}
            {% for key, field in method.flattened_fields.items() if field.repeated and method.input.ident.package != method.ident.package %}
            {% if field.map %} {# map implies repeated, but repeated does NOT imply map#}
            if {{ field.name }}:
                request.{{ key }}.update({{ field.name }})
            {% else %}
            {# And list-y fields can be _extended_ -#}
            if {{ field.name }}:
                request.{{ key }}.extend({{ field.name }})
            {% endif %} {# field.map #}
            {% endfor %} {# key, field in method.flattened_fields.items() #}
            {% endif %} {# method.client_streaming #}

        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = self._transport._wrapped_methods[self._transport.{{ method.name|snake_case}}]
        {% if method.field_headers %}

        # Certain fields should be provided within the metadata header;
        # add these here.
        metadata = tuple(metadata) + (
            gapic_v1.routing_header.to_grpc_metadata((
                {% for field_header in method.field_headers %}
                {% if not method.client_streaming %}
                ('{{ field_header }}', request.{{ field_header }}),
                {% endif %}
                {% endfor %}
            )),
        )
        {% endif %} {# method.field_headers #}

        # Send the request.
        {%+ if not method.void %}response = {% endif %}rpc(
            {% if not method.client_streaming %}
            request,
            {% else %}
            requests,
            {% endif %} {# method.client_streaming #}
            retry=retry,
            timeout=timeout,
            metadata=metadata,
        )
        {% if method.lro %}

        # Wrap the response in an operation future.
        response = {{ method.client_output.ident.module_alias or method.client_output.ident.module }}.from_gapic(
            response,
            self._transport.operations_client,
            {{ method.lro.response_type.ident }},
            metadata_type={{ method.lro.metadata_type.ident }},
        )
        {% elif method.paged_result_field %}

        # This method is paged; wrap the response in a pager, which provides
        # an `__iter__` convenience method.
        response = {{ method.client_output.ident }}(
            method=rpc,
            request=request,
            response=response,
            metadata=metadata,
        )
        {% endif %} {# method.lro #}
        {% if not method.void %}

        # Done; return the response.
        return response
        {% endif %} {# method.void #}
        {{ '\n' }}
    {% endfor %}


__all__ = (
    '{{ service.client_name }}',
)
{% endblock %}
