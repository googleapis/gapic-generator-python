Getting Started
---------------

To use this plugin, you will need an API which is specified using a
protocol buffer. Additionally, this plugin makes some assumptions at the
margins according to `Google API design conventions`_, so following those
conventions is recommended.

Example
~~~~~~~

If you want to experiment with an already-existing API, one example is
available. (Reminder that this is still considered experimental, so apologies
for this part being a bit strange.)

You need to clone the `googleapis`_ repository from GitHub, and change to
a special branch:

.. code-block:: shell

  $ git clone git@github.com:googleapis/googleapis.git
  $ cd googleapis
  $ git checkout --track -b input-contract origin/input-contract
  $ cd ..

The API available as an example (thus far) is the `Google Cloud Vision`_ API,
available in the ``google/cloud/vision/v1/`` subdirectory. This will be used
for the remainder of the examples on this page.

You will also need the common protos, currently in experimental status,
which define certain client-specific annotations. These are in the
`api-common-protos`_ repository. Clone this from GitHub also:

.. code-block:: shell

  $ git clone git@github.com:googleapis/api-common-protos.git
  $ cd api-common-protos
  $ git checkout --track -b input-contract origin/input-contract
  $ cd ..

.. _googleapis: https://github.com/googleapis/googleapis/tree/input-contract
.. _api-common-protos: https://github.com/googleapis/api-common-protos/tree/input-contract
.. _Google Cloud Vision: https://cloud.google.com/vision/


Compiling an API
~~~~~~~~~~~~~~~~

To get a client library, you need to both compile the proto descriptors
into compiled message types (which is functionality built into ``protoc``)
and also into a client library (which is what this plugin does).

These can be done in the same step. ``protoc`` requires an output destination
for each plugin invoked; you just want these to match:

.. code-block:: shell

  # This is assumed to be in the `googleapis` project root, and we also
  # assume that api-common-protos is next to it.
  $ protoc google/cloud/vision/v1/*.proto \
      --proto_path=../api-common-protos/ --proto_path=. \
      --python_out=/dest/ --pyclient_out=/dest/

.. note::

  **A reminder about paths.**

  Remember that ``protoc`` is particular about paths. It requires all paths
  where it expects to find protos, and *order matters*. In this case,
  the common protos must come first, and then the path to the API being built.


Running a Client Library
~~~~~~~~~~~~~~~~~~~~~~~~

Once you have compiled a client library, it is time for the fun part:
actually running it!

Create a virtual environment for the library:

.. code-block:: shell

  $ virtualenv ~/.local/client-lib --python=`which python3.7`
  $ source ~/.local/client-lib/bin/activate

Next, install the library:

.. code-block:: shell

  $ cd /dest/
  $ pip install --editable .

Now it is time to play with it!
Here is a test script:

.. code-block:: python

  # This is the client library generated by this plugin.
  from google.cloud import vision

  # Instantiate the client.
  #
  # If you need to manually specify credentials, do so here.
  # More info: https://cloud.google.com/docs/authentication/getting-started
  #
  # If you wish, you can send `transport='grpc'` or `transport='http'`
  # to change which underlying transport layer is being used.
  ia = vision.ImageAnnotator()

  # Send the request to the server and get the response.
  response = ia.batch_annotate_images({
      'requests': [{
          'features': [{
              'type': vision.types.image_annotator.Feature.Type.LABEL_DETECTION
          }],
          'image': {'source': {
              'image_uri': 'https://s3.amazonaws.com/cdn0.michiganbulb.com'
                           '/images/350/66623.jpg',
          }},
      }],
  })
  print(response)


.. _Google API design conventions: https://cloud.google.com/apis/design/
