.. _getting-started/docker:

Using the Docker Image
======================

If you are just getting started with code generation for protobuf-based APIs,
or if you do not have a robust Python environment already available, we
recommend using our `Docker`_ image to build client libraries.

However, this tool offers first-class support for local execution using
protoc: :ref:`getting-started/local`. It is still reasonably easy, but
initial setup will take a bit longer.

.. note::

    If you are interested in contributing, using a local installation
    is recommended.

.. _Docker: https://docker.com/


Installing
----------

Docker
~~~~~~

In order to use a Docker image, you must have `Docker`_ installed.
Docker is a container management service, and is available on Linux, Mac,
and Windows (although most of these instructions will be biased toward
Linux and Mac).

Install Docker according to their `installation instructions`_.

.. note::

    This image requires Docker 17.05 or later.

.. _installation instructions: https://docs.docker.com/install/

Pull the Docker Image
~~~~~~~~~~~~~~~~~~~~~

Once Docker is installed, simply pull the Docker image for this tool:

.. parsed-literal::

    $ docker pull gcp.io/gapic-images/gapic-generator-python:\ |version|\


Usage
-----

To use this plugin, you will need an API which is specified using a
protocol buffer. Additionally, this plugin makes some assumptions at the
margins according to `Google API design conventions`_, so following those
conventions is recommended.

Example
~~~~~~~

If you want to experiment with an already-existing API, one example is
available. (Reminder that this is still considered experimental, so apologies
for this part being a bit strange.)

You need to clone the `googleapis`_ repository from GitHub, and change to
a special branch:

.. code-block:: shell

  $ git clone git@github.com:googleapis/googleapis.git
  $ cd googleapis
  $ git checkout --track -b input-contract origin/input-contract
  $ cd ..

The API available as an example (thus far) is the `Google Cloud Vision`_ API,
available in the ``google/cloud/vision/v1/`` subdirectory. This will be used
for the remainder of the examples on this page.

.. _googleapis: https://github.com/googleapis/googleapis/tree/input-contract
.. _Google Cloud Vision: https://cloud.google.com/vision/


Compiling an API
~~~~~~~~~~~~~~~~

Compile the API into a client library by invoking the Docker image.

It is worth noting that the image must interact with the host machine
(your local machine) for two things: reading in the protos you wish to compile,
and writing the output. This means that when you run the image, two mount
points are required in order for anything useful to happen.

In particular, the input protos are expected to be mounted into ``/input/``,
and the desired output location is expected to be mounted into ``/output/``.
The output directory must also be writable.

.. note::

    The ``/input/`` and ``/output/`` directories inside the image are
    hard-coded; they can not be altered where they appear in the command
    below.

Perform that step with ``docker run``:

.. code-block:: shell

    # This is assumed to be run from the `googleapis` project root.
    $ docker run \
      --mount type=bind,source=google/cloud/vision/v1/,destination=/input/google/cloud/vision/v1/,readonly \
      --mount type=bind,source=dest/,destination=/output/ \
      --rm \
      --user $UID \
      gcp.io/gapic-images/gapic-generator-python

.. warning::

    ``protoc`` is *very* picky about paths, and the exact construction here
    matters a lot. The source is ``google/cloud/vision/v1/``, and then
    the destination is that full directory path after the ``/input/`` root;
    therefore: ``/input/google/cloud/vision/v1/``.

    This matters because of how proto imports are resolved. The ``import``
    statement imports a *file*, relative to a base directory or set of
    base directories, called the ``proto_path``. This is assumed
    (and hard-coded) to ``/input/`` in the Docker image, and so any directory
    structure present in the imports of the proto files must be preserved
    beneath this for compilation to succeed.


Running a Client Library
~~~~~~~~~~~~~~~~~~~~~~~~

Once you have compiled a client library, it is time for the fun part:
actually running it!

Create a virtual environment for the library:

.. code-block:: shell

  $ virtualenv ~/.local/client-lib --python=`which python3.7`
  $ source ~/.local/client-lib/bin/activate

Next, install the library:

.. code-block:: shell

  $ cd /dest/
  $ pip install --editable .

Now it is time to play with it!
Here is a test script:

.. code-block:: python

  # This is the client library generated by this plugin.
  from google.cloud import vision

  # Instantiate the client.
  #
  # If you need to manually specify credentials, do so here.
  # More info: https://cloud.google.com/docs/authentication/getting-started
  #
  # If you wish, you can send `transport='grpc'` or `transport='http'`
  # to change which underlying transport layer is being used.
  ia = vision.ImageAnnotator()

  # Send the request to the server and get the response.
  response = ia.batch_annotate_images({
      'requests': [{
          'features': [{
              'type': vision.types.image_annotator.Feature.Type.LABEL_DETECTION,
          }],
          'image': {'source': {
              'image_uri': 'https://s3.amazonaws.com/cdn0.michiganbulb.com'
                           '/images/350/66623.jpg',
          }},
      }],
  })
  print(response)


.. _Google API design conventions: https://cloud.google.com/apis/design/
