.. _api-configuration:

API Configuration
-----------------

This code generator relies on some configuration not specified in many
published protocol buffers.

.. warning::

  In fact, this is intended to serve as a reference implementation for
  proposed configuration, so as of this writing it is not published anywhere,
  and is subject to change.

This plugin *will* successfully publish a library on a valid protobuf API
even without any additional information set, but may require some
post-processing work by a human in this case before the resulting client
library will install or work. (Look for values enclosed by ``<<<`` and
``>>>`` to quickly spot these.)

Reading further assumes you are at least nominally familiar with protocol
buffers and their syntax. You may not be familiar with `options`_ yet; it is
recommended to read up on them before continuing. (As a note, no need to
learn about creating custom options; being able to set options that are
already defined is sufficient.)

.. _options: https://developers.google.com/protocol-buffers/docs/proto3#options


Annotations and Imports
~~~~~~~~~~~~~~~~~~~~~~~

As mentioned above, this tool uses a interface specification that is
currently experimental.

When specifying an annotation, your proto will need to import the file
where the annotation is defined. If you try to use an annotation without
importing the dependency proto, then ``protoc`` will give you an error.

All of the protos discussed here are in the `googleapis`_ repository,
on the ``annotated`` branch, and they are consistently in the
``google.api.experimental`` package. While this remains experimental,
the best course is probably to clone the repository:

.. code-block:: shell

  $ git clone git@github.com:googleapis/googleapis.git
  $ cd googleapis
  $ git checkout --track -b annotated origin/annotated

Once this is done, you will need to specify the root of this repository
on disk as a ``--proto_path`` whenever invoking ``protoc``.

.. _googleapis: https://github.com/googleapis/googleapis/


API Client Information
~~~~~~~~~~~~~~~~~~~~~~

The most important piece of information this plugin requires is information
about the client library itself: what should it be called, how is it licensed,
and so on.

This is rolled up into a strcuture spelled ``Client``, and the annotation
is defined in `google/api/experimental/client.proto`_.

The option may be defined as a full structure at the top level of the proto
file. It is recommended that this be declared other under ``option``
directives, and above services or messages.

You really need ``name`` (otherwise the plugin will use a placeholder), but
everything else is fundamentally optional. Here is a complete annotation:

.. code-block:: protobuf

  option (google.api.experimental.client) = {
    name: "News"
    namespace: ["Daily Planet"]
    version: "v1"
    documentation: {
      overview: "The News API allows you to retrieve and search articles posted to the Daily Planet, the most trusted newspaper in Metropolis."
      summary: "All the news fit to print."
      documentation_root_url: "bogus://dailyplanet.com/news-api/docs/"
    }
    copyright: { fullname: "Perry White" year: "2018" }
    license: "Apache-2.0"
  };


Service Information
~~~~~~~~~~~~~~~~~~~

In order to properly connect to an API, the client library needs to know
where the API service is running, as well as what (if anything) else is
required in order to properly connect.

This plugin understands two options for this, which are also defined in
`google/api/experimental/client.proto`_. Rather than being options on
top level files, however, these are both options on `services`_. If an API
defines more than one service, these options do *not* need to match between
them.

The first option is the **host** where the service can be reached:

.. code-block:: protobuf

  service News {
    option (google.api.experimental.host) = "newsapi.dailyplanet.com"
  }

The second option is any oauth scopes which are needed. Google's auth
libraries (such as `google-auth`_ in Python, which code generated by
this plugin uses) expect that credentials declare what scopes they believe
they need, and the auth libraries do the right thing in the situation where
authorization is needed, access has been revoked, and so on.

These are a list, which is accomplished by specifying the option more than
once:

.. code-block:: protobuf

  service News {
    option (google.api.experimental.oauth_scopes) = "https://newsapi.dailyplanet.com/auth/list-articles"
    option (google.api.experimental.oauth_scopes) = "https://newsapi.dailyplanet.com/auth/read-article"
  }

.. _services: https://developers.google.com/protocol-buffers/docs/proto3#services
.. _google/api/experimental/client.proto: https://github.com/googleapis/googleapis/blob/annotated/google/api/experimental/client.proto#L35
.. _google-auth: https://github.com/GoogleCloudPlatform/google-auth-library-python

Future Work
~~~~~~~~~~~

Support for other annotated behavior, such as overloads, long-running
operations, samples, and header values is a work in progress.
